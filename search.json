[{"path":"https://NMautoverse.github.io/NMsim/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Set Creation with NMsim","text":"purpose data sets interest vignette succesfull meaningful simulation NMsim(). data argument NMsim() essential simulation. simulation new subjects, data may need argument addition control stream file path. NMsim NMdata provide concise feature-rich methods create check data sets. NMsim() require simulation data sets created using NMsim functions. already accustumed data set generation tools, can likely continue using NMsim(). However created, NMsim() data argument must data.frame columns names exact NONMEM $DATA variables Checking data set running Nonmem can significantly simplify identification data set issues. vignette uses NMdata::NMcheckData automated checks several value types properties data sets. Like NMsim, NMdata::NMcheckData depend data set created.","code":"simres <- NMsim(file.mod=file.mod,data=data.sim)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"a-basic-simulation-data-set","dir":"Articles","previous_headings":"Introduction","what":"A basic simulation data set","title":"Data Set Creation with NMsim","text":"example create regimen loading dose 300 mg followed 150 QD 6 days. dose compartment 1, want simulate samples second compartment. numbers depend model data set intended used . NMcreateDoses() flexible function creates dosing records based concise syntax. add label regimen right away. Now add sample records using NMaddSamples(). dat.sim now valid simulation data set one subject. However, even though NMaddSamples() try order data meaningful way, recommended always manually order data set. use data.table’s setorder(). dplyr::arrange can just well used. row identifier (counter) can make post-processing easier, add . NMsim include plotting functionality, simple way show dosing amounts sample times. NMdata::NMexpandDoses() used expand doses coded ADDL/II order get data row plot dose. also take sum amounts time point case doses simultaneous. using NMexpandDoses() simulation data set plottet. brief overview number events broken event type EVID dose amount AMT: Showing top five rows understanding data now looks like. Notice following issues: Data contains mix numeric non-numeric columns Columns sorted Nonmem-friendly style non-numeric columns right Finally, check simulation data set various potential issues Nonmem data sets using NMdata::NMcheckData summarize number doses observations: aware NMsim() reorder rows simulation. user responsible ordering simulation data.","code":"### multiple dose regimens with loading are easily created with NMcreateDoses too ## We use ADDL+II (either method easy) doses <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),addl=data.frame(ADDL=c(0,5),II=c(0,24)),CMT=1) doses <- transform(doses,trt=\"300 mg then 150 mg QD\") ## Notice, the ID and MDV columns are included doses ## Add simulation records - longer for QD regimens dat.sim <- NMaddSamples(doses,TIME=0:(24*7),CMT=2) ## sort data set  setorder(dat.sim,ID,TIME,EVID) ## Adding a row identifier (generally not necessary but recommended) dat.sim$ROW <- 1:nrow(dat.sim) dtplot <- NMdata::NMexpandDoses(dat.sim,as.fun=\"data.table\") dtplot <- dtplot[,.(AMT=sum(AMT)),by=.(ID,CMT,TIME,EVID)]  ggplot(dtplot,aes(TIME,factor(CMT),colour=factor(EVID)))+     geom_point(data=function(x)x[EVID==1],aes(size=AMT))+     geom_point(data=function(x)x[EVID==2],shape=\"|\")+     labs(x=\"Time (hours)\",y=\"Compartment\")+     theme(legend.position=\"bottom\") ## until NMdata 0.1.7 NMcheckData requires a DV column dat.sim[,DV:=NA_real_] NMdata::NMcheckData(dat.sim,type.data=\"sim\") #> No findings. Great!"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"add-time-after-previous-dose-and-related-information","dir":"Articles","previous_headings":"Introduction","what":"Add time after previous dose and related information","title":"Data Set Creation with NMsim","text":"Just like preparation data set observed data, time previous dose may relevant time analyze simulation results . use NMdata::addTAPD() add automatically. Notice TAPD sample TIME==0. addTAPD use order data set determine time-order records. default behavior addTAPD treat sample taken exact time dose pre-dose. instead want considered post-dose, specify order EVID numbers. addTAPD uses NMdata::NMexpandDoses make sure dosing times considered. See ?NMdata::addTAPD created columns mean many useful features.","code":"dat.sim2 <- addTAPD(dat.sim) head(dat.sim2) ## order.evid=c(1,2) means doses are ordered before EVID=2 records dat.sim2 <- addTAPD(dat.sim,order.evid=c(1,2)) ## now the TIME=0 sample has TAPD=0 head(dat.sim2)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"multiple-endpoints-e-g--parent-and-metabolite","dir":"Articles","previous_headings":"Introduction","what":"Multiple endpoints (e.g. parent and metabolite)","title":"Data Set Creation with NMsim","text":"Pass data.frame NMaddSamples’s CMT argument include multiple endpoints.","code":"NMaddSamples(doses,CMT=data.frame(CMT=c(2,3),DVID=c(\"Parent\",\"Metabolite\")),TIME=1:2)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"cohort-dependent-or-individual-sampling-schemes","dir":"Articles","previous_headings":"Introduction","what":"Cohort-dependent or individual sampling schemes","title":"Data Set Creation with NMsim","text":"way CMT argument, TIME can also data.frame. contains covariate found doses data, added simulation times merged accordingly. can use say cohort identifier, ID allows reuse (parts ) observed sample times.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-DataCreate.html","id":"other-features","dir":"Articles","previous_headings":"Introduction","what":"Other features","title":"Data Set Creation with NMsim","text":"name implies default function use EVID=2 (means neither doses, samples, resetting events) records. want change (maybe EVID=0), use EVID argument.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"other-relevant-material","dir":"Articles","previous_headings":"","what":"Other relevant material","title":"Simulation with Parameter Uncertainty","text":"Please note following ACOP2024 poster recent comprehensive document:Simulation clinical trial predictions model uncertainty using NMsim (Poster T110) Authors: Sanaya Shroff, Philip Delff","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation with Parameter Uncertainty","text":"vignettes aims enabling use NMsim following purposes sampling successful covariance step using models bootstrap sampling","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-of-parameter-uncertainty","dir":"Articles","previous_headings":"","what":"Simulation of parameter uncertainty","title":"Simulation with Parameter Uncertainty","text":"already saw NMsim can easily used generate new subjects (say prediction intervals) using -subject -occasion variability described model. may also want simulate uncertainty parameter estimates (say confidence intervals). NMsim supports two different approaches . Simulation based estimated variance-covariance matrix parameters estimated successful $COVARIANCE step Nonmem. method specified argument method.sim=NMsim_VarCov. Simulation based bootstrap model. NMsim bootstrap. bootstrap hand, NMsim() can reuse bootstrapped models simulation. obtained simply running NMsim() multiple estimated models. requires sampled bootstrap models must available. example based results PSN’s bootstrap function. must noted current implementation based $COVARIANCE step simulate $OMEGA $SIGMA parameters correct distribution. typical value simulations, limitation affect results. forest plot example typical subject estimates simulated parameter uncertainty. post-processing involves statistics across simulated populations ($OMEGA) residual error ($SIGMA), method used preliminary analyses. beyond scope vignette describe pros cons two approaches. following examples serve exlain prerequisites using NMsim , get NMsim job.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-of-parameter-uncertainty-based-on-a-covariance-step","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation of parameter uncertainty based on a covariance step","title":"Simulation with Parameter Uncertainty","text":"succesful covariance step Nonmem, NMsim can sample models estimated variance-covariance matrix. , NMsim derive confidence intervals based estimated variance-covariance matrix. samples models , can derive desired confidence intervals, whatever need. , shall try get far details , remember . assuming estimated vairance-covariance matrix reliable estimate parameter precision, implying Gaussian distribution parameter uncertainties. reason important understand depending model, can lead samples parameter values beyond allowed range. can lead sampled models fail meaningful. point successful covariance step may sufficient criterion picking approach simulating uncertainty; appropriate parametrization another one. Anyway, getting NMsim work simple : may get messages like “Unable run job” job “allowed run queue”. Counter-intuitively , messages mean job isn’t run. used sge=TRUE means sending 1000 generated jobs queuing system. case, NMsim track execution jobs hence collect results done. Instead returns small data.frame paths simulation output control streams written. check status jobs manually, done, can read results using NMreadSim(): now simulation results 1000 sampled models collected. shall models sampled bootstrap, calculate confidence intervals based methods.","code":"set.seed(552) simlsts.VarCov <- NMsim(     file.mod=file.mod,              ## Path to estimation input control stream     data=dat.sim                    ## simulation input data    ,dir.sims=\"~/NMsim_vignette/tmp\" ## where to store temporary simulation files    ,dir.res=\"simulate-results\"      ## where to store simulation results files    ,table.vars=\"PRED IPRED\"         ## Let Nonmem write a minimum output table    ,method.sim=NMsim_VarCov         ## Var-Cov parameter sampling    ,name.sim=\"VarCov\"               ## a recognizable directory name    ,nsims=500                       ## sampling 500 models    ,sge=TRUE                        ## run simulations in parallel please ) simres.VarCov <- NMreadSim(\"simulate-results/NMsim_xgxr032_VarCov_paths.rds\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-from-a-bootstrap","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation from a bootstrap","title":"Simulation with Parameter Uncertainty","text":"approach simulation parameter uncertainty currently provided NMsim simulation bootstrap. , NMsim run bootstrap, simply runs simulation using sampled models bootstrap. fact means don’t even need dedicated method achieve , simply run simulation multiple Nonmem models described begging vignette. used PSN’s bootstrap. can run simulation models way: NMsim keeps column default called model holds model name, derived control stream file name. behavior due NMsim relying functionality implemented NMdata reading writing data. Using NMdata::NMscanData. example, can derive estimated confidence interval population prediction time summarizing across simulation models (samples).","code":"## generate a vector with paths to all the input control streams mods.bootstrap <- list.files(path=file.project(\"nonmem/bs1_032_N1000/m1\"),                              pattern=\".+\\\\.mod$\",full.names = T)  ## number of models to be run ## length(mods.bootstrap)  file.res.bootstrap <- NMsim(     file.mod=mods.bootstrap   ## Estimation input control stream    ,data=dat.sim              ## Simulation input data    ,method.sim=NMsim_default  ## a single simulation with each sampled model    ,dir.sims=\"~/NMsim_vignette/bootstrap\" ## Where to save simulation results    ,file.res=\"simulate-results/simres_bootstrap.rds\"    ,table.vars=\"PRED IPRED\"   ## Let Nonmem write a minimum output table    ,sge=TRUE                  ## run simulations in parallel    ,method.update.inits=\"nmsim\" ) simres.bootstrap <- NMreadSim(\"simulate-results/simres_bootstrap.rds\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"the-confidence-intervals","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"The confidence intervals","title":"Simulation with Parameter Uncertainty","text":"Derivation confidence intervals identical two methods, using data.table’s feature separate two methods (sampling covariance steps using bootstrap samples). Plotting two next . simple model smooth covariance step two confidence intervals similar. look hard, can see minor differences.","code":"## Stacking results from the two approaches to simulating with ## parameter uncertainty. allres <- rbind(simres.VarCov[,method:=\"Covariance step\"],                 simres.bootstrap[,method:=\"Bootstrap\"],                 fill=TRUE)  ## long format so calculations can be done by prediction type. allresl <- melt(allres[EVID==2],                 measure.vars=c(\"PRED\",\"IPRED\"),                 variable.name=\"pred.type\",                 value.name=\"pred.value\")  ## deriving median by model and time to have a single value per model ## and time point. This is only needed in case multiple subjects are ## simulated by each model. sum.res.model <- allresl[,                          .(predm=median(pred.value))                         ,by=.(method,model,TIME,pred.type)]   sum.uncertain <- sum.res.model[    ,setNames(as.list(quantile(predm,probs=c(.025,.5,.975))),              c(\"predml\",\"predmm\",\"predmu\"))    ,by=.(method,TIME,pred.type)] ggplot(sum.uncertain,aes(x=TIME,fill=pred.type))+     geom_ribbon(aes(ymin=predml,ymax=predmu),alpha=.5)+     geom_line(aes(y=predmm,colour=pred.type))+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")+     facet_wrap(~method)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ResidVar.html","id":"add-residual-variability","dir":"Articles","previous_headings":"","what":"Add residual variability","title":"NMsim - Simulation of residual variability","text":"best way simulate residual variability include estimation control stream described vignette. NMsim currently provide automated way add simulation residual variability Nonmem. provide method simulate residual variability R, based Nonmem parameter estimates. used case one existing Nonmem without residual variability simulated, feasible modify model control stream reason. function called addResVar() supports additive, proportional, combined (additive proportional) error models. can also add residual error log scale (exponential error model). addResVar supports estimation using $SIGMA $THETA (Nonmem). user specify two methods used Nonmem model using par.type argument. thing must specified parameter numbers standard deviations variances. model simulated vignette combined error model estimated using $SIGMA matrix: now specify addResVar find variance proportional component $SIGMA[1,1] one additive component $SIGMA[2,2]. case SIGMA used, -diagonal (covariance) elements $SIGMA matrix also used simulation. par.type=\"THETA\" default assumption thetas represent standard deviation (contrast using par.type=\"SIGMA\"). can modified using scale.par argument. arguments avoid negative observations several features. , last resort.","code":"Y=F+F*ERR(1)+ERR(2) file.mod <- file.project(\"nonmem/xgxr021.mod\")  simres <- NMsim(file.mod=file.mod,                 data=dat.sim) simres.with.resvar <- addResVar(simres,path.ext=fnExtension(file.mod,\"ext\"),par.type=\"SIGMA\",prop=1,add=2)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"what-is-a-subject","dir":"Articles","previous_headings":"","what":"What is a subject?","title":"Reuse simulated subjects","text":"refered “subject” really combination ETAs. Covariates must handled user simulation input dataset. also discussed NMsim-known.html.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Reuse simulated subjects","text":"Let’s simulate 10,000 ETA combinations store file called xgxr032_simEtas.phi. ’ll just use simulation data set created NMsim-DataCreate.html now can use NMsim_known().","code":"file.project <- function(...)file.path(system.file(\"examples\",package=\"NMsim\"),...) file.mod <- file.project(\"nonmem/xgxr032.mod\") NMsim:::simPopEtas(file=file.mod,                    N=1e4,                    seed=238861,                    file.phi=\"xgxr032_simEtas.phi\"                    ) #> seed is deprecated. Use `seed.R`. #> Existing file not overwritten. dat.sim <- read_fst(path=\"simulate-results/dat_sim.fst\",as.data.table=TRUE) dat.sim.multiple <- egdt(dat.sim[,!(\"ID\")],data.table(ID=c(1,4,89))) #>      data nrows ncols #>    <char> <int> <int> #> 1:    dt1   171    10 #> 2:    dt2     3     1 #> 3: result   513    11 setorder(dat.sim.multiple,ID,TIME,EVID) simres <- NMsim(     file.mod=file.mod,     data=dat.sim.multiple,     method.sim=NMsim_known,     file.phi=\"xgxr032_simEtas.phi\",     name.sim=\"reuseSubjs\",     table.vars=\"PRED IPRED\",     path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\",     dir.sims=\"simulate-tmp\",     dir.res=\"simulate-results\" )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"simulate-the-same-simulated-subjects-on-multiple-regimens","dir":"Articles","previous_headings":"Example","what":"Simulate the same simulated subjects on multiple regimens","title":"Reuse simulated subjects","text":"","code":"dat.sim.multiple.regs <- lapply(c(100,300,600),function(dose1){     transform(dat.sim.multiple,AMT=AMT/300*dose1,trt=sprintf(\"%d mg then %d mg QD\",dose1,dose1/2)) }) |> rbindlist() dat.sim.multiple.regs[,REC:=.I]"},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-TypSubj.html","id":"this-document-is-retired","dir":"Articles","previous_headings":"","what":"This document is retired","title":"Simulation of typical subjects","text":"work integrated NMsim-intro.html longer maintained.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-TypSubj.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation of typical subjects","text":"vignettes aims enabling use NMsim following purposes Simulation typical subjects","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-TypSubj.html","id":"simulation-of-a-typical-subject","dir":"Articles","previous_headings":"","what":"Simulation of a typical subject","title":"Simulation of typical subjects","text":"typical subject understood subject without random effects, .e. ETA’s equal zero. important realize “typical” covariates user still need control model, simulation input data, combination . Getting NMsim run ETA’s equaling zero easy: first simulation used PRED default simulation method get typical subject simulation. work many cases, depends model. way run simulation ETA’s set 0 using method.sim=NMsim_typical.","code":"simres.typ <- NMsim(file.mod=file.mod,                     data=dat.sim,                     name.sim=\"typSubj\",                     typical=TRUE) p.typ <- ggplot(simres.typ,aes(TIME,IPRED,color=trt))+geom_line()+     geom_line(aes(y=PRED)) p.typ"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-VPC.html","id":"simulations-for-visual-predictive-checks-vpc","dir":"Articles","previous_headings":"","what":"Simulations for Visual Predictive Checks (VPC)","title":"VPC Simulations","text":"vignette shows generate simulations generation VPC plots. NMsim include functionality summarizing quantiles plotting, provides powerful ways obtain simulated data needed. shall see tidyvpc package easily creates VPC plots based simulation results.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-VPC.html","id":"default-option-reuse-estimation-data-for-simulation","dir":"Articles","previous_headings":"","what":"Default option: reuse estimation data for simulation","title":"VPC Simulations","text":"Normally, two main arguments NMsim path input control stream (file.mod) simulation input data set (data). leave data argument, NMsim re-use estimation data simulation. simulation need VPC. use example model included NMsim: performed simulation similar one produced VPC function PSN. However, important differences. simulation results automatically read R. table.vars argument allows user narrow variables written disk. can speed simulation considerably reduce amount disk space Nonmem simulation results require. postprocessing results done NMsim. See easily .","code":"file.mod <- system.file(\"examples/nonmem/xgxr032.mod\",package=\"NMsim\") NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\") NMdataConf(dir.sims=\"simtmp-VPC\",            dir.res=\"simres-VPC\"            ) set.seed(43) ## notice the data argument is not used. simres.vpc <- NMsim(file.mod,                     table.vars=c(\"PRED\",\"IPRED\", \"Y\"),                     name.sim=\"vpc_01\",                     subproblems=500                     )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-VPC.html","id":"plotting-using-tidyvpc","dir":"Articles","previous_headings":"","what":"Plotting using tidyvpc","title":"VPC Simulations","text":"mentioned, NMsim postprocess simulation generation VPC plot, offter plotting functions. R package called tidyvpc offer two things moreover implemented data.table, ’s fast. following simple code shows get results NMsim VPC plot tidyvpc.","code":"library(ggplot2) library(tidyvpc) #> tidyvpc is part of Certara.R! #> Follow the link below to learn more about PMx R package development at Certara. #> https://certara.github.io/R-Certara/ library(NMdata) ## read the data as it was used in the Nonmem model res <- NMscanData(file.mod,quiet=TRUE) ## only plot observation events from estimation data set data.obs <- subset(res,EVID==0) ## Only plot simulated observation events data.sim <- subset(simres.vpc,EVID==0)  ## run vpc vpc1 <-     observed(data.obs, x = TIME, y = DV) |>     simulated(data.sim, y = Y) |>     stratify(~DOSE) |>     binning(bin = \"ntile\", nbins = 9) |>     vpcstats()   plot(vpc1)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-VPC.html","id":"use-a-different-input-data-set","dir":"Articles","previous_headings":"Plotting using tidyvpc","what":"Use a different input data set","title":"VPC Simulations","text":"first example used exact data used estimation. common way produce VPC, saw advantage user risk making mistakes preparing data set simulations. However, may interest include additional data even different data set simulation. including data points excluded estimation (like samples quantification limit) separate study included model. read data want provide NMsim’s data argument.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-VPC.html","id":"make-use-of-the-cluster","dir":"Articles","previous_headings":"Plotting using tidyvpc","what":"Make use of the cluster","title":"VPC Simulations","text":"repeat , now 500 times (subproblems). make use arguments efficiency. sge means jobs sent cluster. nc argument now used meaning one core used per job. node cluster 16 cores, engage 500/16 ~ 32 nodes parallel, jobs executed time. supply path Nonmem executable. PSN work without specifying Nonmem path, PSN reason takes time submitting jobs cluster. nodes available, following simulation take couple minutes execute.","code":"file.res <- \"simulate-results/simpaths-vpc.rds\" set.seed(43) ## notice the data argument is not used. sim.vpc.sge <- NMsim(file.mod,                      table.vars=c(\"PRED\",\"IPRED\", \"Y\"),                      name.sim=\"vpc_01\"                     ,subproblems=500                     ,sge=TRUE                      )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"no-longer-maintained","dir":"Articles","previous_headings":"","what":"NO LONGER MAINTAINED","title":"Simulation of New Subjects","text":"document replaced NMsim-intro.html. Please read instead.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation of New Subjects","text":"vignettes aims enabling Use NMsim simulate Nonmem models given input data set Distinguish perform common types simulations: new subjects, Simulate multiple new subjects derive prediction intervals Simulate one Nonmem model one NMsim() function call Important arguments Speed NMsim avoiding large table statements Add residual variability already performed model simulation using NMsim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Simulation of New Subjects","text":"configured NMsim path Nonmem installation maybe also PSN. See NMsim-config.html. Don’t worry - easy.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"estimation-based-on-single-dose-simulation-of-multiple-doses","dir":"Articles","previous_headings":"","what":"Estimation based on single dose, simulation of multiple doses","title":"Simulation of New Subjects","text":"situation like : collected PK PD data single ascending dose trial drug candidate. PK model estimated using Nonmem. file model input output control streams (extensions .mod .lst respetively), parameter estimates (.ext). want predict concentrations multiple dose regimen. regimen studied clinical trials far, decided use population PK simulations purpose.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"the-simulation-data-set","dir":"Articles","previous_headings":"Estimation based on single dose, simulation of multiple doses","what":"The Simulation data set","title":"Simulation of New Subjects","text":"can create Nonmem-compatible simulation data set however want. keep separate topic read one already created NMsim-DataCreate.html using tools provided NMsim make task simpler faster :","code":"dat.sim <- read.csv(system.file(\"examples/derived/dat_sim1.csv\",package=\"NMsim\"))"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"simulation-of-a-new-subject","dir":"Articles","previous_headings":"","what":"Simulation of a new subject","title":"Simulation of New Subjects","text":"first time using NMsim, just want try simplest thing can think . Simulate new subject considerd multiple dose regimen estimated PK model single dose study. plot population individual predictions simulations (case) typical subject one simulated subject. variable called Y individual prediction plus residual variability. paper. code included show results NMsim ready plotted. main reason data transformed long format (melt) get ggplot2 generate legend automatically.  reason can plot simulation residual variability control stream includes variable Y defined residual variability $ERROR: residual variability case don’t line later paper.","code":"file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\")  simres <- NMsim(file.mod=file.mod,                 data=dat.sim) datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y))  ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\") Y=F+F*ERR(1)+ERR(2)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"what-happened","dir":"Articles","previous_headings":"","what":"What happened?","title":"Simulation of New Subjects","text":"NMsim uses automation tools NMdata Save data Nonmem-friendly format Create simulation control stream based referenced input control stream Update initial values based estimated values Modify input data-related sections reading input siulation data Modify output table file names paths generate simulation output tables Run Nonmem Read output tables combine input data one data object generated files stored folder called NMsim next estimation control stream. shortly section “basic additional arguments NMsim”. Let’s see first lines returned object: Notice things returned data: columns output tables defined input control stream . soon learn modify Input data columns (like trt). Additional columns (model nmout) may familiar NMdata users. soon learn “_noname” model column comes .","code":"simres[1:3] #>      ROW    ID  TIME  EVID   CMT   AMT    II  ADDL    DV   MDV   TVKA   TVV2 #>    <num> <int> <num> <num> <num> <num> <num> <num> <num> <num>  <num>  <num> #> 1:     1     1     0     1     1   300     0     0     0     1 2.1666 75.729 #> 2:     2     1     0     2     2    NA    NA    NA     0     1 2.1666 75.729 #> 3:     3     1     1     2     2    NA    NA    NA     0     1 2.1666 75.729 #>      TVV3   TVCL     KA     V2     V3     CL      Q  IPRED      Y   PRED   RES #>     <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num> <num> #> 1: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 0.0000 0.0000 0.0000     0 #> 2: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 0.0000 0.0000 0.0000     0 #> 3: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 3.1946 3.0486 2.8907     0 #>     WRES                   trt                model #>    <num>                <char>               <char> #> 1:     0 300 mg then 150 mg QD NMsim_xgxr021_noname #> 2:     0 300 mg then 150 mg QD NMsim_xgxr021_noname #> 3:     0 300 mg then 150 mg QD NMsim_xgxr021_noname"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"how-to-re-read-the-simulation-results","dir":"Articles","previous_headings":"","what":"How to (re-)read the simulation results","title":"Simulation of New Subjects","text":"NMsim() creates .rds file information results stored. named based model name name.sim argument. NMsim provides path console every run. can also specify exactly stored file name using file.res argument. Run function NMreadSim file (re-)read simulation results. NMreadSim also supports wait argument making wait simulation results available case submitted large simulation cluster want continue execution ’s done.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-models","dir":"Articles","previous_headings":"","what":"Multiple models","title":"Simulation of New Subjects","text":"continue model, want compare simulation based model another model considering. NMsim can collect data one object: included file.res argument specify one single rds file NMsim create one two models simulated. can re-read results like : case multiple models provided, NMsim simply loops . collect results, can use model column separate two simulations. Since far just simulating subject model, makes litlle sense compare individual preditions. just plot population prediction (PRED):  simplicity, shall show rest examples just one model. run multiple models way shown .","code":"files.2.mod <- system.file(c(\"examples/nonmem/xgxr021.mod\",\"examples/nonmem/xgxr114.mod\"),package=\"NMsim\") simres.2models <- NMsim(file.mod=files.2.mod,                         data=dat.sim,                         file.res=\"simulate-results/simres_2models_paths.rds\"                         ) simres.2models <- NMreadSim(\"simulate-results/simres_2models_paths.rds\") ggplot(simres.2models,aes(TIME,PRED,colour=model))+geom_line()+     facet_wrap(c(\"trt\"),scales=\"free\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"a-few-basic-additional-arguments-to-nmsim","dir":"Articles","previous_headings":"","what":"A few basic additional arguments to NMsim","title":"Simulation of New Subjects","text":"first couple examples run bare minimum arguments - estimation control stream simulation data set. obviously encouraged read help NMsim learn many useful features , learn vignette. arguments learn point already. : dir.sims Path folder generated files stored. Use avoid NMsim write directories estimation models . may belong . may want separate model development step post-processing step. encouraged explore NMsim leaves directory (find fully reproducible simulation Nonmem runs including simulation input data). dir.res dir.sims contains Nonmem files, can specify separate directory just compressed results. rds files containing information simulations performed also saved . means soon results read , contents dir.sims can purged without loss critical data. can save lot disk space. name.sim Give simulation meaningfull name. , NMsim called “noname”. table.vars important. redefines output table section estimation control stream simulation control stream. estimation control stream may many variables printed (make Nonmem slow), may useful simulation analysis. See used . get used argument, use frequently. wait Wait simulation done return resulting data? path rds file read NMreadSim returned. reuse.results TRUE results found file, read instead rerunning simulation. seed numeric value used Nonmem’s $SIMULATION section learn arguments next examples.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"more-subjects-and-prediction-intervals","dir":"Articles","previous_headings":"","what":"More subjects and prediction intervals","title":"Simulation of New Subjects","text":"create prediction interval based selected model, need simulate multiple new subjects. two ways easily obtain . One repeat (rbind) simulation input dataset, one repetetion per new subject, update ID column get distinct subjects.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-subjects-created-in-simulation-input-data","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"Multiple subjects created in simulation input data","title":"Simulation of New Subjects","text":"follwing shows one generate 1000 subjects using data.table. (use data.table lot, can provide good way without, happy include ). now simulate 1000 subjects plugging data object:","code":"dat.sim.1000 <- NMdata::egdt(                             as.data.table(dat.sim)[,!(\"ID\")]                            ,                             data.table(ID=1:1000)                         ) dat.sim.1000[,ID:=.GRP,by=.(ID,trt)] ## order with respect to new IDs setorder(dat.sim.1000,trt,ID,TIME,EVID) ## check dataset NMcheckData(dat.sim.1000,type.data=\"sim\") simres.n1000.1 <- NMsim(file.mod=file.mod,                         data=dat.sim.1000,                         dir.sims=\"~/NMsim_vignette\", ## where to store simulation files                         name.sim=\"N1000_datarep\"                         )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-subjects-generated-by-nonmem","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"Multiple subjects generated by Nonmem","title":"Simulation of New Subjects","text":"way simulate multiple subjects making use Nonmem’s SUBPROBLEMS simulation feature makes Nonmem rerun simulation specified number times. Notice , use dat.sim data without 1000 replications. make use NMREP column generated NMdata::NMscanData redefine ID column: two approaches computationally equally fast, significant difference probably Nonmem reading smaller larger simulation input data file. Unless input dataset becomes large, merely question preference modeler one use. case simulated patients need different dosing sample schedules, manual construction data needed - ’s straightforward replication.","code":"simres.n1000.2 <- NMsim(file.mod=file.mod,                         data=dat.sim,                         subproblems=1000,                         dir.sims=\"~/NMsim_vignette\", ## where to save and run Nonmem simulations                         dir.res=\"simulate-results\", ## where to save simulation results                         name.sim=\"N1000_subproblems\",                         ) simres.n1000.2 <- as.data.table(simres.n1000.2)[,ID:=.GRP,by=.(NMREP,ID,trt)]"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"the-prediction-interval","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"The prediction interval","title":"Simulation of New Subjects","text":"now plot prediction interval - case based results simulation using SUBPROBLEMS; makes difference derive prediction interval.","code":"simres.pi <- as.data.table(simres.n1000.2)[,setNames(as.list(quantile(IPRED,probs=c(.05,.5,.95))),cc(ll,median,ul)),                                            by=.(trt,TIME)] simres.pi$type <- \"pi\" simres.pi$pi.cover <- \"90%\"  p.pi.typ <- ggplot(simres.pi,aes(TIME,fill=trt))+     geom_ribbon(aes(ymin=ll,ymax=ul,alpha=pi.cover))+     geom_line(aes(y=median,colour=trt))+     scale_alpha_manual(values=c(\"90%\"=.5))+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")  p.pi.typ"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-basics.html","id":"read-previously-generated-simulations","dir":"Articles","previous_headings":"","what":"Read previously generated simulations","title":"Simulation of New Subjects","text":"need save simulation results already saved NMsim. Instead, use arguments dir.sims, dir.res name.sim make sure get meaningful structure generated files. read results NMreadSim(). fact, also NMsim Nonmem run.","code":"simres.n1000.1 <- NMreadSim(\"simulate-results/NMsim_xgxr021_N1000_datarep_paths.rds\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Requirements and Configuration","text":"vignettes aims enabling Understand requirements using NMsim Configure NMsim use PSN methods provided NMsim update Nonmem control stream initial values run Nonmem Understand pros cons using PSN vs. methods provided NMsim. Configure NMsim store results desired locations separate storage temporary files storage selected efficiently stored key result data.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Requirements and Configuration","text":"NMsim many features work newer R installation. seamless simulation experience within R, Nonmem installations linux, Windows Mac supported. Multi-threaded execution may currently work Windows. NMsim relies Nonmem running simulations. fully seamless simulation experience within R, NMsim must able execute Nonmem. simplest example easily achieved, R Nonmem run system. separate systems, questions : R Nonmem share access data structure relevant files can stored executed? can R login system run Nonmem, instance SSH? case two criteria met, fully seamless experience still possible. system meet requirements, mean NMsim can’t work. can still put together Nonmem simulation control streams data make everything ready Nonmem execute. run Nonmem, can use NMsim::NMreadSim() collect results.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"configuration-of-nmsim","dir":"Articles","previous_headings":"","what":"Configuration of NMsim","title":"Requirements and Configuration","text":"section, background discussion provided understand methods choose. matter prefer use, best set NMsim able use Nonmem (available) PSN. flexibility switch methods preferred.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"specify-the-nonmem-paths","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Specify the Nonmem paths","title":"Requirements and Configuration","text":"NMsim run Nonmem, needs know find Nonmem executable. step recommended. easiest way configure NMdata’s configuration function. Say want run Nonmem /opt/NONMEM/nm75/run/nmfe, insert loading NMdata beginning script Windows, executable .bat extension. path look normally use PSN Nonmem interface, know Nonmem installed, can check using PSN. following command give Nonmem installation paths PSN configured . However, likely still need add last piece path installation directory nonmem binary. need execute scripts systems different Nonmem installation paths, can select prioritized set paths like , taking first one found:","code":"NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\") NMdataConf(path.nonmem =\"C:/nm75g64/run/nmfe75.bat\") psn -nm_versions paths.nm <- c(\"/opt/NONMEM/nm75/run/nmfe75\",               \"/opt/nonmem/nm751/run/nmfe75\",               \"C:/nm75g64/run/nmfe75.bat\") path.nonmem <- paths.nm[min(which(file.exists(paths.nm)))]  NMdataConf(path.nonmem=path.nonmem)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"specify-the-psn-installation-path","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Specify the PSN installation path","title":"Requirements and Configuration","text":"PSN available, can run execute update_inits terminal, don’t need configure NMsim finds PSN. PSN installed, provide paths two executables running (something like /opt/PSN/execute run1.mod), tell NMsim find . case, easiest loading NMdata running: Notice dir.psn refers directory path.nonmem refers file.","code":"NMdataConf(dir.psn=\"/opt/PSN\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"test-nmsim-configuration","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Test NMsim Configuration","title":"Requirements and Configuration","text":"Whether NMsim finds Nonmem configuration steps can checked running NMsimTestConf(). Look $path.nonmem (NMsim looking executable), $exists.path.nonmem (whethere executable found), $method.execute (method selected - “nmsim” prefered).","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"configure-the-directories-nmsim-writes-to","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Configure the directories NMsim writes to","title":"Requirements and Configuration","text":"NMsim creates two main directories output.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"dir-sims","dir":"Articles","previous_headings":"Configuration of NMsim > Configure the directories NMsim writes to","what":"dir.sims","title":"Requirements and Configuration","text":"simulation control streams data created NMsim output written Nonmem far, largest directory files necessarily needed storage.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"dir-res","dir":"Articles","previous_headings":"Configuration of NMsim > Configure the directories NMsim writes to","what":"dir.res","title":"Requirements and Configuration","text":"Selected efficiently stored simulation output data. _paths.rds contains index table `NMreadSim()1. contain simulated data insignificant size. .fst full simulation output data set. NMreadSim() automatically create file first time reads _paths.rds. user need know fst format keep reading simulation results via NMreadSim() _paths.rds. must make sure preserve directory case need re-analyze analyze simulation output without re-running simulations.","code":""},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"psn-or-not-for-nonmem-execution","dir":"Articles","previous_headings":"PSN or not?","what":"PSN or not for Nonmem execution","title":"Requirements and Configuration","text":"NMsim can call Nonmem using PSN’s execute similar functionality included NMsim. refer methods way referred NMsim() function argument controls one used, .e. method.execute=\"psn\" method.execute=\"nmsim\". PSN users familiar PSN’s execute , method.execute=\"nmsim\" needs words explanation. essentially R-based method similar PSN’s execute, meaning creates temporary folder containing necessary files running Nonmem, runs nmfe (specified using path.nonmem) copies desired result files back location input control stream. NMsim can control behavior function better can PSN’s execute enables NMsim additional things method.execute=\"nmsim\". simulations, method.execute=\"psn\" provide advantages method.execute=\"nmsim\". contrast, simulation types work method.execute=\"nmsim\". need tell NMsim find Nonmem (setting path.nonmem) work.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"psn-or-not-for-updating-initial-values","dir":"Articles","previous_headings":"PSN or not?","what":"PSN or not for updating initial values","title":"Requirements and Configuration","text":"NMsim needs update initial values using model estimate prior running simulation. PSN provides update_inits function . refer enabled NMsim, inits=list(method=\"psn\"). NMsim also provides similar functionality internally, referred inits=list(method=\"NMsim\"). default method comes advanced features conservation structure comments parameter sections, fully featured interface specify values features “fix” limits parameters. inits=list(method=\"psn\") may prefered users familiar PSN. inits=list(method=\"psn\") additional features, known -sides. order make use inits=list(method=\"psn\"), need make sure NMsim can find PSN. want use inits=list(method=\"NMsim\") don’t need anything.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-config.html","id":"input-model-file-name-extensions","dir":"Articles","previous_headings":"PSN or not?","what":"Input model file name extensions","title":"Requirements and Configuration","text":"following requirements file name contents concerns “input model”. concern files generated NMsim. requirement file name extension input control stream. NMsim function documentation argument file.mod refer input control streams .mod. However, input control stream can extension (e.g., .ctl .txt). estimate files (.ext, .phi known subjects simulated, .cov simulating parameters covariance step) default expected carry file name file name extension. See arguments like file.ext file.phi specify paths. Currently, default behavior customized two arguments provided NMsim() call extend relevant simulation. Output table files input model may needed. case using NMsim_known models estimated using Bayesian $ESTIMATION methods like SAEM /$IMP. case NMsim need find ETA values subjects, even spread across output tables. estimation methods leave PHI instead ETA .phi file. emperical Bayes estimates, NMsim needs ETAs. limitations file names output tables.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-examples2.html","id":"part-1","dir":"Articles","previous_headings":"NMsim - Seamless NONMEM Simulation Platform in R","what":"Part 1","title":"NMsim Examples","text":"examples","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-examples2.html","id":"part-2","dir":"Articles","previous_headings":"NMsim - Seamless NONMEM Simulation Platform in R","what":"Part 2","title":"NMsim Examples","text":"just text 7","code":""},{"path":[]},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-examples2.html","id":"last-updated-may-21-2025-1","dir":"Articles","previous_headings":"NMsim - Simulation-Based Forest Plots with NMsim","what":"Last updated: May 21, 2025","title":"NMsim Examples","text":"examples","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation-Based Forest Plots with NMsim","text":"forest plot effective widely recognized way illustrate estimated covariate effects exposure response, parameters related (e.g. clearance). forest plot typically includes precision estimate terms confidence interval. NMsim provides highly automated methods simulation Nonmem models generation forest plots.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"objectives","dir":"Articles","previous_headings":"Introduction","what":"Objectives","title":"Simulation-Based Forest Plots with NMsim","text":"short demonstration generation simulation-based forest plots using NMsim intended make user ready perform following steps. Dosing sampling scheme using NMcreateDoses() Define covariates simulate using forestDefineCovs() Based $COV using NMsim_NWPRI() Based $COV using NMsim_VarCov() Using existent bootstrap estimation (e.g. PSN) Define end-points, AUC, Cmax simulation-based endpoint Summarize covariate effect estimates confidence intervals, using forestSummarize() Plot summary forest plot step facilitated efficient interfaces (R functions) automated execution. Essentially, step one function call. results methods compared one plot. Plotting includied example using coveffectsplot package. packages user’s scripts can used plotting. shall focus main example simple general. Hopefully, user able customize apply similar workflow models minimum effort. Folded code-chunks references provided additional features.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"prerequisites","dir":"Articles","previous_headings":"Introduction","what":"Prerequisites","title":"Simulation-Based Forest Plots with NMsim","text":"simulating based $COVARIANCE, .cov file. simulating based bootstrap, either summary .ext files boot strap estimations must available. references /covariate quantile values calculated NMsim (easiest option), ideally output ($TABLE) data sets input data set used estimation available. Familiarity NMsim-intro.html, least including “first simulation NMsim()”. Configuration NMsim user can succesfully simulation using NMsim(). Familiarity methods simulate parameter uncertainty can helpful. settling final forest plot simulation, recommended understand pros cons different methods provided NMsim described NMsim-ParamUncertain.html.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"background","dir":"Articles","previous_headings":"Introduction","what":"Background","title":"Simulation-Based Forest Plots with NMsim","text":"Forest plots include confidence interval estimated simulated effect. confidence interval derived uncertainy estimates parameter set. -subject variability (BSV), also called intra-individual variability. NMsim simulate distribution covariate effect, uncertainty must obtained one two sources. Either result succesfull $COVARIANCE step model, using already executed bootstrap. cases, forest plot can derived based model estimates without simulation. case forest plots PK parameters clearance covariance step available, can case forest plots exposure metrics PK linear steady-state average concentration (AUC) interest. PK non-linear /exposure metrics Cmax depends multiple PK parameters interest, simulation-based forest plot may needed. shall see, NMsim provides flexible concise framework perform required. fact, simulation-based workflow general easy perform may prefered even cases simulation needed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"initialization","dir":"Articles","previous_headings":"","what":"Initialization","title":"Simulation-Based Forest Plots with NMsim","text":"model selected.","code":"library(data.table) library(NMsim) library(NMdata)   library(NMcalc)  ## Optional. Used to calculate AUC. library(coveffectsplot) ## used for plotting library(knitr) ## for printing tables with knitr::kable library(ggplot2) library(ggstance)  theme_set(theme_bw())  NMdataConf(     path.nonmem = \"/opt/NONMEM/nm75/run/nmfe75\", ## path to NONMEM executable     dir.sims=\"simtmp-forest\", ## where to store temporary simulation results     dir.res=\"simres-forest\"   ## where to store final simulation results ) ## file.mod <- \"NMsim-forest-models/xgxr134.mod\" file.mod <- system.file(\"examples/nonmem/xgxr134.mod\",package=\"NMsim\")"},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"dosing-and-sampling","dir":"Articles","previous_headings":"Generation of simulation input data","what":"Dosing and sampling","title":"Simulation-Based Forest Plots with NMsim","text":"simulation data set match model compartment numbers, must contain variables needed run NONMEM model. simulate daily dosing 30 mg. col.id=NA omit subject id doses instead reuse multiple subjects. sample every 15 minutes first day one day steady-state. following table summarizes number doses samples. Notice, doses repeated. one analyte data set. instance, parent metabolite, adding sampling times look like : also add “Time previous dose” helpful plotting. done using NMdata::TAPD() used period column distinguish time intervals analysis. remember postprocessing values column. looking multiple analytes, remember postprocess column distringuishes , . example, analyte.","code":"doses <- NMcreateDoses(TIME=0,AMT=30,ADDL=30,II=24) doses ## add a sampling scheme time.sim <- c(     seq(0,24,.25), ## Day 1     seq(0,24,.25)+30*24 ## Steady-State ) dt.sim <- NMaddSamples(doses,TIME=time.sim,CMT=2,as.fun=\"data.table\") dt.sim[TIME<=24,period:=\"Day 1\"] dt.sim[TIME>=30*24&TIME<=31*24,period:=\"Steady-State\"] dt.sim.parent.metab <-     NMaddSamples(doses,TIME=time.sim,CMT=data.frame(analyte=c(\"parent\",\"metabolite\"),CMT=c(2,3))) dt.sim <- addTAPD(dt.sim)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"define-covariates-to-analyze","dir":"Articles","previous_headings":"Generation of simulation input data","what":"Define covariates to analyze","title":"Simulation-Based Forest Plots with NMsim","text":"NMsim::forestDefineCovs() can used construct set covariate value combinations needed derive forest plot. varies one covariate time, keeping covariates reference value. can derive references quantiles data set. reference values use median observed population continuous covariates manually select “Female” reference sex. short example: read estimation data set data.ref, pass data argument forestDefineCovs(). Using , forestDefineCovs() can evaluate specified quantiles covariates observed desired population. specify reference values simulation covariate values specific values (see AGE) covariate quantiles (WEIGHTB). quantiles derived forestDefineCovs(), names covariates (, AGE, WEIGTB, MALEN) must columns data. categorical variables, can label numeric values like ref=c(Female=0) means label MALEN==0 “Female”. deriving quantiles, forestDefineCovs() first derive unique covariate values subject data set, derive quantiles. subject hence contributes equally, independently many data points contribute. now combinations covariates object called covs. Notice type column distinguishes reference combination contrast simulations one covariate varied time.","code":"## reading output and input tables from estimation. Used to determine ## reference values and quantiles. data.ref <- NMdata::NMscanData(file.mod,quiet=TRUE) ## Specifying the covariates covs <- forestDefineCovs(     AGE=list(ref=55,values=c(35,45,65,75),label=\"Age (years)\"), ## Age by specific values     ## notice, values OR quantiles can be provided     WEIGHTB=list(ref=median, quantiles=c(10,25,75,90)/100, label=\"Bodyweight (kg)\"), ## Bodyweight by quantiles     MALEN=list(ref=c(Female=0), values=c(Male=1), label=\"Sex\"), ## Sex is treated categorical     data=data.ref,     as.fun=\"data.table\" ) ## adding distinct ID's for each combination of covariates covs[,ID:=.GRP,by=.(type,covvar,covval)] ## repeating the doses for all combinations of covariates. Using NMdata::egdt() dt.sim.noid <- as.data.table(dt.sim)[,!(\"ID\")] dt.sim.covs <- egdt(dt.sim.noid,covs) ##      data nrows ncols ##    <char> <int> <int> ## 1:    dt1   195    13 ## 2:    dt2    10    10 ## 3: result  1950    23 ### same thing, the data.table way ## dt.sim.covs <- covs[,dt.sim.noid[],by=covs] ### same thing, dplyr way ## dt.sim.covs <- dplyr::select(dt.sim,-ID) |> ##   cross_join(covs) setorder(dt.sim.covs,ID,TIME,EVID) simres.typ <- NMsim(file.mod=file.mod,                 data=dt.sim.covs,                 name.sim=\"singlesubj_covs\",                 table.vars=c(\"PRED\"),                 typical=TRUE,                 as.fun=\"data.table\") simres.typ <- NMreadSim(\"simres-forest/xgxr134_singlesubj_covs_MetaData.rds\",as.fun=\"data.table\") simres.ref <- simres.typ[type==\"ref\"]  all.plots <- split(simres.typ[type==\"value\"],by=\"covvar\")|>     lapply(         function(x){             covvar.this <- x[,unique(covvar)]             simres.ref[,covvalc:=paste(get(covvar.this),\"(Reference)\")]             all <- rbind(x,simres.ref)             ggplot(all,aes(TAPD,PRED,colour=covvalc))+                 geom_line()}+         facet_wrap(~period)     )   patchwork::wrap_plots(all.plots,ncol=1)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"simulation-with-parameter-uncertainty","dir":"Articles","previous_headings":"","what":"Simulation With Parameter Uncertainty","title":"Simulation-Based Forest Plots with NMsim","text":"need run simulations repeatedly, sampling parameters based uncertainty estimates. can done various ways. First , one must choose non-parametric parametric sampling. Non-parameteric sampling typically based bootstrap, parametetric sampling often based successfull $COVARIANCE step. NMsim methods either type, multiple methods available parametric sampling. best source information different methods ACOP2024 poster Simulation clinical trial predictions model uncertainty using NMsim Sanaya Shroff Philip Delff. case shall use parametric sampling, relying Nonmem $COVARIANCE step. Since case simulating typical subjects (random effects fixed zero), need variability fixed effects (THETA’s). Multiple methods available NMsim . use NMsim_NWPRI - automates simulation using Nonmem NWPRI subroutine sample parameter sets. simulation method excels fast execute simulates parameter sets sequentially one Nonmem run. important run typical=TRUE. -subject variability desired, please refer NMsim-ParamUncertain.html. encounter issues samples run, consider whether uncertainty estimates THETA’s lead sampled THETA’s make model undefined. often absorption parameters, clearences, volumes strictly positive parameter estimated poor precision. happens, may want go back estimate THETA log scale make sure sampled values positive. quick way look combining parameter estimates (.ext file) automatic labeling parameters using NMdata::NMrelate(). large RSE potential issue strictly positive parameters (RSE=0.25 parameter positive estimate corresponds roughly 1/10,000 chance sample negative). case, THETAs estimated log scale, covariate effects negative, model seem issues.","code":"simres.forest.nwpri <- NMsim(file.mod # path to NONMEM model                             ,data=dt.sim.covs, # simulation dataset                             ,name.sim=\"nwpri_forest\" # output name suffix                             ,method.sim=NMsim_NWPRI # sampling with NWPRI                             ,subproblems=1000 ## number of parameter sets sampled                             ,typical=TRUE # FALSE to include BSV                             ,table.vars=cc(PRED,IPRED) # output table variables                             ,seed.R=342 # seed for reproducibility                              ) NMdata::NMreadExt(file.mod,as.fun=\"data.table\")[par.type==\"THETA\",.(RSE=se/value),by=.(par.name,FIX)] |>     NMdata::mergeCheck(NMdata::NMrelate(file.mod,par.type=\"THETA\",as.fun=\"data.table\")[,.(par.name,code)],by=\"par.name\",quiet=TRUE)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"Post processing","title":"Simulation-Based Forest Plots with NMsim","text":"NMsim provides function post processing set simulations setup forestDefineCovs(). key steps performed function outlined . importantly, normalizes exposures reference value sampled set parameters. , derives median confidence interval quantiles simulated distribution. step required user define functions derive relevant exposure metrics. use AUC 0-24h Cmax. using IPRED calculations. Notice, simulation run typical=TRUE PRED IPRED . However, depending Nonmem version, NWPRI works little differently, IPRED used prior Nonmem 7.6.0.","code":"### Define exposure metrics funs.exposure <- list(     \"Cmax\"=function(x) max(x$IPRED)    ,\"AUC\"=function(x) trapez(x$TIME,x$IPRED)     ## ,\"Concentration at 4 hours\"=function(x) x$value[x$TAPD==4] )  sum.uncertain <- forestSummarize(simres,                                  funs.exposure = funs.exposure,                                  by=cc(period),                                  cover.ci=.95                                  ) setDT(sum.uncertain) sum.uncertain[covlabel==\"Bodyweigt (kg)\",covlabel:=\"Bodyweight (kg)\"]"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Simulation-Based Forest Plots with NMsim","text":"use R package coveffectsplot plotting. coveffectsplot::forest_plot() requires certain column names adjust first. acceptance region 80%-125% bio equivalence included.   shall use method provided NMsim based multivariate normal distribution (mvrnorm). method selected adequate sampling THETA’s, require additional software installed, Nonmem.","code":"setDT(sum.uncertain) setnames(sum.uncertain,          cc(covvalf,predmm,predml,predmu,metric.var),          cc(label,mid,lower,upper,paramname)          )  sum.uncertain[,MEANVAL:=mid] sum.uncertain[,covname:=covlabel] nsig <- 3 sum.uncertain[,LABEL := sprintf(\"%s [%s - %s]\",signif2(mid,nsig),signif2(lower,nsig),signif2(upper,nsig))]   descrip.legend <- \"Reference (vertical line)\\nClinically relevant limits 0.8-1.25 (colored area)\"  ### I don't know why forest_plot() needs this  label_value <- function(x,... )x  fun.plot <- function(data,...){     textsize <- 10     forest1 <- forest_plot(         data = data,         facet_formula = \"covlabel ~ paramname\",          facet_scales = \"free_y\",         facet_space = \"free_y\",         xy_facet_text_bold = FALSE,          plot_table_ratio = 1.7,          table_text_size = 3,         x_label_text_size = textsize,         y_label_text_size = textsize,          x_facet_text_size = textsize,          y_facet_text_size = textsize,         base_size=textsize,         strip_placement = \"outside\",         table_position = \"right\",         legend_order = c(\"pointinterval\", \"ref\", \"area\"),         x_range = c(.5,1.5),         ref_legend_text = descrip.legend,         area_legend_text = descrip.legend,         facet_switch = c(\"y\"),         legend_position=\"bottom\",         ...     ) }  forest.day1 <- fun.plot(sum.uncertain[period==\"Day 1\"]) forest.ss <- fun.plot(sum.uncertain[period==\"Steady-State\"]) ext.mvrnorm <- samplePars(file.mod=file.mod,nsim=1000,method=\"mvrnorm\",seed.R=6789)  simres.forest.mvrnorm <- NMsim(file.mod # path to NONMEM model                               ,data=dt.sim.covs, # simulation dataset                               ,name.sim=\"mvrnorm_forest\" # output name suffix                               ,method.sim=NMsim_VarCov # sampling with mvrnorm                               ,ext=ext.mvrnorm                               ,typical=TRUE # FALSE to include BSV                               ,table.vars=cc(PRED,IPRED) # output table variables                               ,seed.R=342 # seed for reproducibility                               ,sge=TRUE # TRUE if submitting to a cluster                               ,nc=1                                ) ext.simpar <- samplePars(file.mod=file.mod,nsim=1000,method=\"simpar\",seed.R=789)  simres.forest.simpar <- NMsim(file.mod # path to NONMEM model                              ,data=dt.sim.covs, # simulation dataset                              ,name.sim=\"simpar_forest\" # output name suffix                              ,method.sim=NMsim_VarCov # sampling with mvrnorm                              ,ext=ext.simpar                              ,typical=TRUE # FALSE to include BSV                              ,table.vars=cc(PRED,IPRED) # output table variables                              ,seed.R=342 # seed for reproducibility                              ,sge=TRUE # TRUE if submitting to a cluster                              ,nc=1                               ) dir.bs <- \"NMsim-forest-models/xgxr134_bs_N1000/m1\" exts.bs <- list.files(dir.bs,pattern=\".+\\\\.ext$\",recursive=T,full.names = TRUE) ext.boot <- NMreadExt(exts.bs,as.fun=\"data.table\")  simres.forest.boot <- NMsim(file.mod # path to NONMEM model                            ,data=dt.sim.covs, # simulation dataset                            ,name.sim=\"boot_forest\" # output name suffix                            ,method.sim=NMsim_VarCov # sampling with mvrnorm                            ,ext=ext.boot                            ,typical=TRUE # FALSE to include BSV                            ,table.vars=cc(PRED,IPRED) # output table variables                            ,seed.R=342 # seed for reproducibility                            ,sge=TRUE # TRUE if submitting to a cluster                            ,nc=1                             )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"comparison-of-different-simulation-methods","dir":"Articles","previous_headings":"Plotting","what":"Comparison of different simulation methods","title":"Simulation-Based Forest Plots with NMsim","text":"forest simulated methods mentioned . expected, forest plots similar NWPRI, mvrnorm, simpar. expected sample THETAs multivariate normal distribution. Among , NMsim_NWPRI fasted execute. bootstrap may desired needed non-parametric approach. Remember simple model, similarities results based parametric models bootstrap generalized based .","code":"simres.forest.nwpri <- NMreadSim(c(\"simres-forest/xgxr134_nwpri_forest_MetaData.rds\"),as.fun=\"data.table\") simres.forest.mvrnorm <- NMreadSim(c(\"simres-forest/xgxr134_mvrnorm_forest_MetaData.rds\"),as.fun=\"data.table\") simres.forest.simpar <- NMreadSim(c(\"simres-forest/xgxr134_simpar_forest_MetaData.rds\"),wait=TRUE,as.fun=\"data.table\") simres.forest.boot <- NMreadSim(c(\"simres-forest/xgxr134_boot_forest_MetaData.rds\"),wait=T,as.fun=\"data.table\")   simres.forest.all <- rbind(simres.forest.nwpri[,method:=\"NWPRI\"],                            simres.forest.mvrnorm[,method:=\"mvrnorm\"],                            simres.forest.boot[,method:=\"Bootstrap\"]                           ,simres.forest.simpar[,method:=\"Simpar\"]                           ,fill=T                            )  ### How many samples used with each method? unique(simres.forest.all[,.(method,model.sim,NMREP)])[,.N,by=.(method)] sum.uncertain <- forestSummarize(simres.forest.all,                                  funs.exposure = funs.exposure,                                  by=cc(method,period),                                  cover.ci=.95,                                  as.fun=\"data.table\"                                  ) plot.compare <- ggplot(sum.uncertain[period==\"Steady-State\"],aes(predmm,covvalf,colour=method))+     geom_rect(aes(xmin=.8,xmax=1.2,ymin=-Inf,ymax=Inf,colour=NULL),fill=\"grey85\")+     geom_rect(aes(xmin=predml,xmax=predmu,ymin=covvalf,ymax=covvalf),               position=ggstance::position_dodgev(height=0.5))+     geom_point(position=ggstance::position_dodgev(height=0.5))+     facet_grid(covlabel~metric.var,scales=\"free_y\",switch=\"y\")+     geom_vline(xintercept=1,linetype=2)+     labs(y=\"\",x=\"Relative Covariate Effect\",colour=\"Simulation Method\")+     theme(legend.position=\"bottom\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-forest.html","id":"post-processing-step-by-step","dir":"Articles","previous_headings":"","what":"Post-processing step-by-step","title":"Simulation-Based Forest Plots with NMsim","text":"including code main steps post processing function, NMsim::forestSummarize(). important scientist understands forest plots derived document represent relative effect covariate exposure metric. derived NMsim::forestSummarize() quantiles exposure relative reference subject. confidence interval hence expresses uncertainty covariate effect subject covariates reference values. Notice, code consists snippets NMsim::forestSummarize() function. code intended used .","code":"### use only simulated samples simres <- as.data.table(data)[EVID==2]   ### summarizing exposure metrics for each subject in each model, ### each combination of covariates resp.model <- simres[,lapply(funs.exposure,function(f)f(.SD)),                      by=c(allby,modelby,\"ID\")]  ### the exposure metrics in long format. mvars <- names(funs.exposure) resp.model.l <- melt(resp.model,measure.vars=mvars,variable.name=\"metric.var\",value.name=\"metric.val\")   ## deriving median by model and time to have a single value per ## model This is only relevant in case multiple subjects are ## simulated by each model.  sum.res.model <- resp.model.l[    ,.(predm=median(metric.val))    ,by=c(modelby,allby,\"metric.var\") ]  ### making reference value a column rather than rows.  ## column with refrence exposure value is called val.exp.ref  ### summarize distribution of ratio to ref across parameter samples/models sum.uncertain <- sum.res.model[    ,setNames(as.list(quantile(predm/val.exp.ref,probs=c((1-cover.ci)/2,.5,1-(1-cover.ci)/2))),              c(\"predml\",\"predmm\",\"predmu\"))    ,by=c(allby,\"metric.var\")]"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"introduction NMsim aims enabling NONMEM users Configure NMsim find NONMEM installation Set simulation data set simulate NONMEM model using data set Simulate typical subject Simulate multiple models compare Simulate observed previously simulated subjects based emperical Bayes estimates (ETA’s) Simulate multiple subjects covariate sampling generation prediction intervals","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"NMsim must configured path NONMEM executable. can done NMsim() call using path.nonmem argument, easily can configured globally following way. Also including NMsim run NONMEM store intermediate files (dir.sims) store final results (dir.res).","code":"library(NMdata) ## Point NMsim to your NONMEM exectuable - looks like this on linux/osx NMdataConf(path.nonmem = \"/opt/NONMEM/nm75/run/nmfe75\") ## or on Windows, it could be NMdataConf(path.nonmem = \"c:/nm75g64/run/nmfe75.bat\") NMdataConf(dir.sims=\"simtmp-intro\", ## location of sim tmp files            dir.res=\"simres-intro\")  ## location of sim results"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"a-first-simulation-with-nmsim","dir":"Articles","previous_headings":"","what":"A first simulation with NMsim()","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"providing simulation data set, default NMsim() behavior sample new subject (ETA’s). PRED, IPRED, Y (defined control stream) easily obtained NMsim. Notice information model needed except control stream file path. simulation based evaluation PRED, IPRED, optionally Y. Options exist building advanced simulation models. models shown based data available xgxr.","code":"file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",                         package=\"NMsim\") data.sim <- read.csv(system.file(\"examples/derived/dat_sim1.csv\",                                  package=\"NMsim\")) simres <- NMsim(file.mod=file.mod,data=data.sim) datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y))  plot1 <- ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\",          subtitle=\"Simulation of one new subject.\",          colour=\"\") plot1"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"simulation-data-sets","dir":"Articles","previous_headings":"","what":"Simulation data sets","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"simulation input data set data.frame, NMsim() returns data.frame. input data data.frame Must contain least variables NONMEM need run model (typically ID, CMT, AMT, etc. plus covariates) Can contain character variables (automatically carried results) Column order matter long requirements met, requirements data sets created. already prefered way , ’s fine. NMsim provides convenient helper functions can optionally used. E.g., data set used simulations can created way:","code":"doses <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),                        addl=list(ADDL=c(0,5),II=c(0,24)),CMT=1) dat.sim <- addEVID2(doses,time.sim=0:(24*7),CMT=2)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"creating-dosing-regimens","dir":"Articles","previous_headings":"Simulation data sets","what":"Creating dosing regimens","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"NMcreateDoses() creates just dosing events, addEVID2() adds sampling events. default, doses indicated using EVID=1 samples EVID=2. Notice, NMcreateDoses() convenient behaviours. See ?NMcreateDoses vignette ond creating simulation data sets .","code":"## arguments are expanded - makes loading easy NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1)) ## Different doses by covariate NMcreateDoses(TIME=c(0,12,24),AMT=data.table(AMT=c(2,1,4,2),DOSE=c(1,1,2,2)))"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"adding-sampling-times","dir":"Articles","previous_headings":"Simulation data sets","what":"Adding sampling times","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"adding sampling times set doses /samples, addEVID2() provides similarly flexible interface. accepts data.frames covariates allowing different sampling schemes different subject groups (say different dosing regimens), dosing times can supplied relative previous dosing times.","code":"## a dosing data set with two doses dt.dos <- NMcreateDoses(TIME=c(0,12),AMT=c(1)) ## sampling based on time since previous dose addEVID2(dt.dos,TAPD=1:2,CMT=2) ## TIME and TAPD can be combined - adding a follow-up addEVID2(dt.dos,TAPD=1:2,TIME=96,CMT=2) ## sampling two compartments - naming them addEVID2(dt.dos,TAPD=1:2,CMT=data.frame(CMT=2:3,DVID=c(\"Parent\",\"Metabolite\")))"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"time-since-previous-dose","dir":"Articles","previous_headings":"Simulation data sets","what":"Time since previous dose","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"used examples, ’s worth mentioning NMdata::addTAPD() adding time since previous dose variables related previous dose - previous dosing time, previous dose amount, cumulative number doses, cumulative number doses, culative dose amount. often useful add simulation dataset:","code":"dat.sim <- addTAPD(dat.sim)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"check-the-simulation-dataset","dir":"Articles","previous_headings":"Simulation data sets","what":"Check the simulation dataset","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"quick way check lot common issues NONMEM data set running NMcheckData(): also advised plot simulation data set. See Creation Simulation Data Sets details.","code":"NMcheckData(dat.sim,type.data=\"sim\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"typical-subject-simulation","dir":"Articles","previous_headings":"","what":"Typical subject simulation","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"typical subject subject ETAs = 0 Covariates values supplied using simulation input data set typical=TRUE: replace $OMEGA values zeros","code":"simres.typ <- NMsim(file.mod=file.mod,data=data.sim,                     typical=TRUE,  ## FIX all OMEGA's to zero                     name.sim=\"typical\" ## simulation name - included in output )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"simulate-multiple-models","dir":"Articles","previous_headings":"","what":"Simulate multiple models","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"Multiple models can simulated using data set one function call supplying one model file.mod argument. models can simulated multiple data sets submitting list data.frames data argument. NMsim return one data.frame results easy post-processing. Simulation multiple models even multiple data sets handled within one NMsim() call.","code":"file2.mod <- \"models/xgxr114.mod\" simres.typ2 <- NMsim(file.mod=c(\"2 compartments\"=file.mod,                                 \"1 compartment\"=file2.mod),                      data=data.sim,                      typical=TRUE ## FIX all OMEGA's to zero                      ) ## The \"model\" column is used to distinguish the two models subset(simres.typ2,EVID==2) |>     ggplot(aes(TIME,PRED,colour=model))+     geom_line()"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"emperical-bayes-estimates-known-etas","dir":"Articles","previous_headings":"","what":"Emperical Bayes’ Estimates (known ETAs)","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"Reusing ETA’s enabled using NMsim_EBE method. default, automatically re-uses estimated individual ETAs ID values simulation data must match ID values estimation want simulate ETA sources (.phi files) can specified simulate residual variability - see addResVar() needed Remember: Covariates may needed data set fully reproduce subjects’ parameters following, use table.vars specify variables output NONMEM’s $TABLE section. case, make sure get CL V2. generally, table.vars important know first thing speed NMsim(). NONMEM often takes much longer writing output table actual simulation. recommended specify slim output table using something like table.vars=c(\"PRED\",\"IPRED\",\"Y\") variables may need NONMEM. Notice NMsim knows combine output table data simulation input data, need variables like ID TIME table.vars. Individual parameters confirmed identical estimation results simulation results","code":"## this example uses the same sim data for all subjects res <- NMscanData(file.mod,quiet=T) ids <- unique(res$ID)[1:5] data.sim.ind <- merge(subset(data.sim,select=-ID),                       data.frame(ID=ids)) setorder(data.sim.ind,ID,TIME,EVID) simres.ebe <- NMsim(file.mod,                     data=data.sim.ind,                     method.sim=NMsim_EBE,                     table.vars=c(\"CL\",\"V2\",\"IPRED\",\"PRED\") )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"prediction-intervals","dir":"Articles","previous_headings":"","what":"Prediction intervals","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"New subjects can simulated multiple ways NMsim. input data set contains multiple subjects, subjects get separate random effects due NONMEM $SIMULATION subproblems argument translates SUBPROBLEMS NONMEM subroutine, replicating simulation specified number times new seeds simPopEtas() function can generate synthetic .phi file simulated population can reused future NMsim() calls. can combined simulation covariates R, allowing reuse subjects across multiple simulations. following use approaches simulate 1000 new subjects. use NMsim()’s name.sim argument distinguish simulation output data simulation output files. Prediction intervals. New subjects can simulated multiple ways NMsim. simulated population can reused across simulations.","code":"tablevars=cc(PRED,IPRED,Y) simres.subprob <- NMsim(file.mod=file.mod,                         data=data.sim,                         name.sim=\"Subproblems\", ## naming the simulation                         subproblems=1000,  ## Will become SUPROBLEMS=1000 in NONMEM                         table.vars=tablevars,                         seed.R=764, ## NMsim() will set the R seed for reproducibility                         reuse.results=reuse.results                         ) ## Replicating input data set allows for manual resampling of covariates.  ## NMdata::findCovs() extracts unique values of column that do not vary within `by`. Since `by` is here the subject ID, that means we are finding subject level and globally equal variables only. set.seed(2372) Nsubjs <- 1000 dt.ids <- data.table(ID=1:Nsubjs) dt.covs <- NMscanData(file.mod,quiet=T,as.fun=\"data.table\") |>     findCovs(by=c(\"ID\")) dt.ids[,IDEST:=sample(dt.covs[,ID],size=.N,replace=T)] dt.ids <- mergeCheck(dt.ids,dt.covs[,.(IDEST=ID,WEIGHTB)],by=\"IDEST\")  ## This is data.table-style repeating `data.sim` without `ID` for each ## row in dt.ids. This is an outer join, or a cartesian product. I ## think in dplyr, one can use `crossing` to get this. data.sim.nsubjs <- dt.ids[,subset(data.sim,select=-ID),by=dt.ids] ## see, we repeated one data set using the other ## dims(data.sim,dt.ids,data.sim.nsubjs)  ## generate the population first, by simulating etas to use in the sim simPopEtas(file.mod=file.mod,N=1000,seed=1231,            file.phi=\"simres-intro/xgxr021_1000subjs.phi\") simres.datarep <- NMsim(file.mod=file.mod,                         data=data.sim.nsubjs,                         name.sim=\"Individual simulation data\",                         table.vars=tablevars,                         seed.nm=103,                         method.sim=NMsim_EBE,                         file.phi=\"simres-intro/xgxr021_1000subjs.phi\",                         reuse.results=reuse.results                         ) ## Collect and stack simulation results  simres.newpops <- rbind(as.data.table(simres.subprob),                         simres.datarep,fill=T)[EVID==2]  ## Derive prediction intervals - notice name.sim distincts results from the two methods simres.pi <- simres.newpops[    ,setNames(as.list(quantile(IPRED,probs=c(.05,.5,.95))),cc(ll,median,ul)),     by=.(name.sim,trt,TIME)]  label.pi <- \"90% Prediction interval\" simres.pi$type <- label.pi  p.pi <- ggplot(simres.pi,aes(TIME,fill=type))+     geom_ribbon(aes(ymin=ll,ymax=ul),alpha=.4)+     geom_line(aes(y=median,linetype=\"Median\"))+     scale_alpha_manual(values=setNames(c(.5),label.pi))+     scale_linetype_manual(values=setNames(c(1),\"Median\"))+     facet_wrap(~name.sim)+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\",colour=\"\",linetype=\"\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro-noFolding.html","id":"read-previously-generated-simulations","dir":"Articles","previous_headings":"Prediction intervals","what":"Read previously generated simulations","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"need save simulation results already saved NMsim. Instead, use arguments dir.sims, dir.res name.sim make sure get meaningful structure generated files. read results NMreadSim(). re-read first simulation article, can : folder file names constructed based dir.res=\"simres-intro\" name.sim provided first simulation, case “noname” used placeholder. fact, look console output NMsim, telling us exactly (look last line).","code":"simres <- NMreadSim(\"simres-intro/xgxr021_noname_MetaData.rds\") > simres <- NMsim(file.mod=file.mod,data=data.sim) Location(s) of intermediate files and Nonmem execution:   simtmp-intro/xgxr021_noname Location of final result files:   simres-intro  * Writing simulation control stream(s) and simulation data set(s) * Executing Nonmem job(s)  Starting NMTRAN  (...)  Done with nonmem execution * Collecting Nonmem results  Simulation results returned. Re-read them without re-simulating using:   simres <- NMreadSim(\"simres-intro/xgxr021_noname_MetaData.rds\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"introduction NMsim aims enabling NONMEM users Configure NMsim find NONMEM installation Set simulation data set simulate NONMEM model using data set Simulate typical subject Simulate multiple models compare Simulate observed previously simulated subjects based emperical Bayes estimates (ETA’s) Simulate multiple subjects covariate sampling generation prediction intervals","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"NMsim must configured path NONMEM executable. can done NMsim() call using path.nonmem argument, easily can configured globally following way. Also including NMsim run NONMEM store intermediate files (dir.sims) store final results (dir.res). information test configuration, see NMsim-config.html.","code":"library(NMdata) ## Point NMsim to your NONMEM exectuable - looks like this on linux/osx NMdataConf(path.nonmem = \"/opt/NONMEM/nm75/run/nmfe75\") ## or on Windows, it could be NMdataConf(path.nonmem = \"c:/nm75g64/run/nmfe75.bat\") NMdataConf(dir.sims=\"simtmp-intro\", ## location of sim tmp files            dir.res=\"simres-intro\")  ## location of sim results"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"a-first-simulation-with-nmsim","dir":"Articles","previous_headings":"","what":"A first simulation with NMsim()","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"providing simulation data set, default NMsim() behavior sample new subject (ETA’s). simulation input data set data.frame, NMsim() returns data.frame. Plot simulation results (click button show code): PRED, IPRED, Y (defined control stream) easily obtained NMsim. Notice information model needed except control stream file path. simulation based evaluation PRED, IPRED, optionally Y. Options exist building advanced simulation models. models shown based data available xgxr.","code":"## Point to the model to estimate file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",                         package=\"NMsim\") ## Easily create a muliple-dose simulation data set with a loading dose data.sim <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),ADDL=c(0,5),II=c(0,24),CMT=1)|>     NMaddSamples(TIME=0:(24*7),CMT=2) ## Simulate simres <- NMsim(file.mod=file.mod,data=data.sim,table.vars=c(\"PRED\",\"IPRED\",\"Y\")) datl <- as.data.table(simres) |>     melt(measure.vars=c(\"PRED\",\"IPRED\",\"Y\"))  plot1 <- ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\",          subtitle=\"Simulation of one new subject.\",          colour=\"\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"simulation-data-sets","dir":"Articles","previous_headings":"","what":"Simulation data sets","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"input data data.frame Must contain least variables NONMEM need run model (typically ID, CMT, AMT, etc. plus covariates) Can contain character variables (automatically carried results) Column order matter long requirements met, requirements data sets created. already prefered way , ’s fine. NMsim provides convenient helper functions can optionally used. NMcreateDoses() creates just dosing events, NMaddSamples() adds sampling events. default, doses indicated using EVID=1 samples EVID=2. Notice, NMcreateDoses() many flexible convenient features. See ?NMcreateDoses vignette ond creating simulation data sets .","code":"doses <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),                        addl=list(ADDL=c(0,5),II=c(0,24)),CMT=1) dat.sim <- NMaddSamples(doses,TIME=0:(24*7),CMT=2) ## arguments are expanded - makes loading easy NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1)) ## Different doses by covariate NMcreateDoses(TIME=c(0,12,24),AMT=data.table(AMT=c(2,1,4,2),DOSE=c(1,1,2,2)))"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"adding-sampling-times","dir":"Articles","previous_headings":"Simulation data sets","what":"Adding sampling times","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"adding sampling times set doses /samples, NMaddSamples() provides similarly flexible interface. accepts data.frames covariates allowing different sampling schemes different subject groups (say different dosing regimens), dosing times can supplied relative previous dosing times.","code":"## a dosing data set with two doses dt.dos <- NMcreateDoses(TIME=c(0,12),AMT=c(1)) ## sampling based on time since previous dose NMaddSamples(dt.dos,TAPD=1:2,CMT=2) ## TIME and TAPD can be combined - adding a follow-up NMaddSamples(dt.dos,TAPD=1:2,TIME=96,CMT=2) ## sampling two compartments - naming them NMaddSamples(dt.dos,TAPD=1:2,CMT=data.frame(CMT=2:3,DVID=c(\"Parent\",\"Metabolite\")))"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"time-since-previous-dose","dir":"Articles","previous_headings":"Simulation data sets","what":"Time since previous dose","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"used examples, ’s worth mentioning NMdata::addTAPD() adding time since previous dose variables related previous dose - previous dosing time, previous dose amount, cumulative number doses, cumulative number doses, culative dose amount. often useful add simulation dataset:","code":"dat.sim <- addTAPD(dat.sim)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"check-the-simulation-dataset","dir":"Articles","previous_headings":"Simulation data sets","what":"Check the simulation dataset","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"quick way check lot common issues NONMEM data set running NMcheckData(): also advised plot simulation data set. See Creation Simulation Data Sets details.","code":"NMcheckData(dat.sim,type.data=\"sim\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"typical-subject-simulation","dir":"Articles","previous_headings":"","what":"Typical subject simulation","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"typical subject subject ETAs = 0 Covariates values supplied using simulation input data set typical=TRUE: replace $OMEGA values zeros","code":"simres.typ <- NMsim(file.mod=file.mod,data=data.sim,                     typical=TRUE,  ## FIX all OMEGA's to zero                     name.sim=\"typical\", ## simulation name - included in output )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"simulate-multiple-models","dir":"Articles","previous_headings":"","what":"Simulate multiple models","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"Multiple models can simulated using data set one function call supplying one model file.mod argument. models can simulated multiple data sets submitting list data.frames data argument. NMsim return one data.frame results easy post-processing. Simulation multiple models even multiple data sets handled within one NMsim() call.","code":"file2.mod <- \"models/xgxr114.mod\" simres.typ2 <- NMsim(file.mod=c(\"2 compartments\"=file.mod,                                 \"1 compartment\"=file2.mod),                      data=data.sim,                      typical=TRUE, ## FIX all OMEGA's to zero                      table.vars=c(\"PRED\",\"IPRED\",\"Y\")                      ) ## The \"model\" column is used to distinguish the two models subset(simres.typ2,EVID==2) |>     ggplot(aes(TIME,PRED,colour=model))+     geom_line()"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"emperical-bayes-estimates-known-etas","dir":"Articles","previous_headings":"","what":"Emperical Bayes’ Estimates (known ETAs)","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"Reusing ETA’s enabled using NMsim_EBE method. default, automatically re-uses estimated individual ETAs ID values simulation data must match ID values estimation want simulate ETA sources (.phi files) can specified simulate residual variability - see addResVar() needed Remember: Covariates may needed data set fully reproduce subjects’ parameters following, use table.vars specify variables output NONMEM’s $TABLE section. case, make sure get CL V2. generally, table.vars important know first thing speed NMsim(). NONMEM often takes much longer writing output table actual simulation. recommended specify slim output table using something like table.vars=c(\"PRED\",\"IPRED\",\"Y\") variables may need NONMEM. Notice NMsim knows combine output table data simulation input data, need variables like ID TIME table.vars. Individual parameters confirmed identical estimation results simulation results","code":"## this example uses the same sim data for all subjects res <- NMscanData(file.mod,quiet=T) ids <- unique(res$ID)[1:5] data.sim.ind <- merge(subset(data.sim,select=-ID),                       data.frame(ID=ids)) setorder(data.sim.ind,ID,TIME,EVID) simres.ebe <- NMsim(file.mod,                     data=data.sim.ind,                     table.vars=c(\"CL\",\"V2\",\"IPRED\",\"PRED\") )"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"prediction-intervals","dir":"Articles","previous_headings":"","what":"Prediction intervals","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"New subjects can simulated multiple ways NMsim. input data set contains multiple subjects, subjects get separate random effects due NONMEM $SIMULATION subproblems argument translates SUBPROBLEMS NONMEM subroutine, replicating simulation specified number times new seeds simPopEtas() function can generate synthetic .phi file simulated population can reused future NMsim() calls. can combined simulation covariates R, allowing reuse subjects across multiple simulations. following use approaches simulate 1000 new subjects. use NMsim()’s name.sim argument distinguish simulation output data simulation output files. Simulate 1000 new subjects using $SUBPROBLEMS Notice following reuses input data set 1000 times, column called NMREP count subproblem number output. generate prediction interval, format sufficient. want distinguish subjects, can update ID column reflect unique combinations ID NMREP. data.table, can done way: way, like NMsim() return data.table objects, just run NMdataConf(.fun=\"data.table\"). want tibbles, run NMdataConf(.fun=tibble::as_tibble). Simulate 1000 new subjects covariate sampling Derive plot 90% prediction intervals Prediction intervals. New subjects can simulated multiple ways NMsim. simulated population can reused across simulations.","code":"tablevars=cc(PRED,IPRED,Y) simres.subprob <- NMsim(file.mod=file.mod,                         data=data.sim,                         name.sim=\"Subproblems\", ## naming the simulation                         subproblems=1000,  ## Will become SUPROBLEMS=1000 in NONMEM                         table.vars=tablevars,                         seed.R=764, ## NMsim() will set the R seed for reproducibility                         reuse.results=reuse.results                         ) ## data.table: as.data.table(simres.subprob)[,ID:=.GRP,by=.(NMREP,ID)] ## dplyr: simres.subprob <- simres.subprob |>     group_by(NMREP,ID) |>     mutate(ID = cur_group_id()) |>     ungroup() ## Replicating input data set allows for manual resampling of covariates.  ## NMdata::findCovs() extracts unique values of column that do not vary within `by`. Since `by` is here the subject ID, that means we are finding subject level and globally equal variables only. set.seed(2372) Nsubjs <- 1000 dt.ids <- data.table(ID=1:Nsubjs) dt.covs <- NMscanData(file.mod,quiet=T,as.fun=\"data.table\") |>     findCovs(by=c(\"ID\")) dt.ids[,IDEST:=sample(dt.covs[,ID],size=.N,replace=T)] dt.ids <- mergeCheck(dt.ids,dt.covs[,.(IDEST=ID,WEIGHTB,trt=trtact)],by=\"IDEST\")  ## This is data.table-style repeating `data.sim` without `ID` for each ## row in dt.ids. This is an outer join, or a cartesian product. I ## think in dplyr, one can use `crossing` to get this. data.sim.nsubjs <- dt.ids[,subset(data.sim,select=-ID),by=dt.ids] ## see, we repeated one data set using the other ## dims(data.sim,dt.ids,data.sim.nsubjs)  ## generate the population first, by simulating etas to use in the sim simPopEtas(file.mod=file.mod,N=1000,seed=1231,            file.phi=\"simres-intro/xgxr021_1000subjs.phi\") simres.datarep <- NMsim(file.mod=file.mod,                         data=data.sim.nsubjs,                         name.sim=\"Individual simulation data\",                         table.vars=tablevars,                         seed.nm=103,                         method.sim=NMsim_EBE,                         file.phi=\"simres-intro/xgxr021_1000subjs.phi\",                         reuse.results=reuse.results                         ) ## Collect and stack simulation results  simres.newpops <- rbind(as.data.table(simres.subprob),                         simres.datarep,fill=T)[EVID==2]  ## Derive prediction intervals - notice name.sim distincts results from the two methods simres.pi <- simres.newpops[    ,setNames(as.list(quantile(IPRED,probs=c(.05,.5,.95))),cc(ll,median,ul)),     by=.(name.sim,trt,TIME)]  label.pi <- \"90% Prediction interval\" simres.pi$type <- label.pi  p.pi <- ggplot(simres.pi,aes(TIME,fill=type))+     geom_ribbon(aes(ymin=ll,ymax=ul),alpha=.4)+     geom_line(aes(y=median,linetype=\"Median\"))+     scale_alpha_manual(values=setNames(c(.5),label.pi))+     scale_linetype_manual(values=setNames(c(1),\"Median\"))+     facet_wrap(~name.sim)+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\",colour=\"\",linetype=\"\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-intro.html","id":"read-previously-generated-simulations","dir":"Articles","previous_headings":"","what":"Read previously generated simulations","title":"NMsim - Seamless NONMEM Simulation Platform in R","text":"need save simulation results already saved NMsim. Instead, use arguments dir.sims, dir.res name.sim make sure get meaningful structure generated files. read results NMreadSim(). re-read first simulation article, can : folder file names constructed based dir.res=\"simres-intro\" name.sim provided first simulation, case “noname” used placeholder. fact, look console output NMsim, telling us exactly (look last line). Click show R console output NMsim","code":"simres <- NMreadSim(\"simres-intro/xgxr021_noname_MetaData.rds\") > simres <- NMsim(file.mod=file.mod,data=data.sim) Location(s) of intermediate files and Nonmem execution:   simtmp-intro/xgxr021_noname Location of final result files:   simres-intro  * Writing simulation control stream(s) and simulation data set(s) * Executing Nonmem job(s)  Starting NMTRAN  (...)  Done with nonmem execution * Collecting Nonmem results  Simulation results returned. Re-read them without re-simulating using:   simres <- NMreadSim(\"simres-intro/xgxr021_noname_MetaData.rds\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"vignettes aims enabling use NMsim following purposes Simualation known subjects (estimated random effects),","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"Simulation known ETA values possible NMsim’s internal Nonmem execution method. means, need provide path Nonmem executable. information configuration test configuration NMsim-config.html. familiar basic NMsim arguments described NMsim-intro.html. vignette mostly talks default simulation method (new subjects). vignette provides various examples NMsim_EBE simulation method can used simulate “known” subjects. shall explain detail meant “known subject”. Briefly means ETAs known. common example resimulation subjects estimation data set.","code":"NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"simulation-of-known-subjects","dir":"Articles","previous_headings":"","what":"Simulation of known subjects","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"sometimes want simulate observed subjects, .e. subjects included estimation data. want reuse estimated random effects (ETA’s) given subject ID’s. NMsim method called NMsim_EBE. restriction subjects (values ID) simulation input data must used estimation input data. NMsim_EBE work, ID values simulation data set must identical ID values used estimation. models estimated FOCEI, ETAs stored .phi file produced Nonmem. file must available, NMsim automatically use applicable. EM-based estimation methods SAEM IMP, NMsim use .phi file, user must stored ETAs output table files method work. matter table files , just need . can write like done example model provided NMsim called xgxr032.mod. using EM algorithms SAEM IMP, remember explicitly write ETAs output table Nonmem control stream: “subject” essentially means set ETAs. Covariates must still provided input data set can modified wanted. Notice, NMsim_EBE nothing restore covariates - must define covariates input data needed.","code":"$TABLE ETAS(1:LAST) NOAPPEND NOPRINT FILE=xgxr032_etas.txt"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"simulate-known-subjects-on-a-new-dosing-regimen-and-new-sample-schedule","dir":"Articles","previous_headings":"","what":"Simulate known subjects on a new dosing regimen and new sample schedule","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"following code takes already created simulation data set single ID, merges columns ID onto observed IDs. gives simulation data subjects. First thing, decide model (input control stream estimated model) use example: generate simulation data set loading dose (300 mg) followed 6 doses (150 mg) every 24 hours. smoothness plotted curves use hourly sampling. simulation results plotted subject.","code":"file.mod <- system.file(\"examples/nonmem/xgxr134.mod\",package=\"NMsim\") doses <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),ADDL=5,II=24,CMT=1) ## Now we add the sample records using `NMaddSamples()`.  dat.sim <- NMaddSamples(doses,TIME=0:(24*7),CMT=2) ## read model results just to extract the observed ID's. Notice, if ## your model uses covariates, those should be retrieved too. res.mod <- NMscanData(file.mod,quiet=TRUE) ids <- unique(res.mod[,c(\"ID\",\"WEIGHTB\",\"AGE\",\"MALEN\")])  ## Repeat the simulation data set for each ID and order accordingly  ## we will merge with all the observed subjects in stead of the single ## ID in the original data set. dat.sim$ID <- NULL dat.sim.known <- egdt(ids,                       dat.sim                       ) setorder(dat.sim.known,ID,TIME,EVID) ## check data NMcheckData(dat.sim.known,type.data=\"sim\")  simres.known <- NMsim(file.mod=file.mod,                       data=dat.sim.known,                       method.sim=NMsim_EBE,                       table.vars=\"PRED IPRED CL V2 KA\",                       name.sim=\"known1\"                       ) ggplot(subset(simres.known,EVID==2),aes(TIME,IPRED,colour=factor(ID)))+     geom_line()+     theme(legend.position=\"none\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"individual-dosing-history-sample-times-or-both","dir":"Articles","previous_headings":"","what":"Individual dosing history, sample times or both","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"Individual simulations useful several purposes. Examples Reuse individual dosing history use new common sample scheme. homogeneous evaluation exposure metrics Cmax, AUC, just show concentration-time profiles identical sampling times based model estimated data heterogeneos sampling. Currently, example vignette see examples, pretty clear . Reuse dosing history use individual sampling scheme different data set, e.g. PD. Simulate new common dosing sampling scheme simulate already observed subjects new regimen. sometimes done one reason model considered reliable simulation new subjects individual parameter estimates trusted. Reuse simulated population. One may prefer reuse simulated subjects multiple simulations reproducibility difference say simulation results different regimens driven differences regimen, populations. use NMsim_EBE todo list tog get ’s vignette .","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-known.html","id":"simulate-individual-dosing-history-at-new-individual-sampling-times-for-a-pkpd-dataset","dir":"Articles","previous_headings":"Individual dosing history, sample times or both","what":"Simulate individual dosing history at new individual sampling times for a PK/PD dataset","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"want plot PD data angainst PK. However, PD sampled differnetly PK, want evaluate individual predictions PK model individual PD samplng times - reusing individual dosing history. Reading example PD data: PK model without time-varying covariates, suggested steps generate data simulation : Take dose records PK model estimation input data (pkdos). Just keep necessary columns like ID, TIME, EVID, CMT, AMT, ADDL, II, necessary covariates Take PD data observation records (pdsamples). Just keep ID, TIME, set EVID=2. Add unique row identifier pdsamples (integer row counter, like ROW=1:nrow(pdsamples)) Stack (rbind data.tables bind_rows tidyverse) pkdos pdsamples one data set (pdsim) pdsim, set DV=NA Sort pdsim least ID, TIME EVID. depending trial design case time-varying covariates, can keep data records PK data (without DV), change observation records simulation records (EVID=2 instead EVID=0). run NMsim like . renaming prediction columns using Nonmem $TABLE statement confuse PK predictions PD predictions.","code":"pd <- readRDS(system.file(\"examples/data/xgxr_pd.rds\",package=\"NMsim\")) ## some code below makes use of data.table features so we make it a data.table setDT(pd) ## Take dose records from PK model estimation input data pkres <- NMscanData(file.mod,quiet=TRUE) pkdos <- pkres[EVID==1,.(ID, TIME, EVID, CMT, AMT)] ## Take PD data observation records (`pdsamples`) pdsamples <- pd[EVID==0,.(ID,TIME,LIDV)] ## Stack `pkdos` and `pdsamples` to one data set (`pdsim`) pdsim <- rbind(pkdos,pdsamples,fill=TRUE) ## Nonmem needs a DV column to run pdsim[,DV:=NA] ## only include subjects that were included in the PK model pdsim <- pdsim[ID%in%pkres$ID] setorder(pdsim,ID,TIME,EVID) simres.pksim <- NMsim(file.mod,                       data=pdsim,                       name.sim=\"pkpd\",                       method.sim=NMsim_EBE,                       table.vars=\"PKIPRED=IPRED PKPRED=PRED\"                       ) ggplot(simres.pksim[!is.na(LIDV)&!is.na(PKIPRED)],aes(PKIPRED,LIDV))+     geom_point()+     labs(x=\"Individual PK prediction\",y=\"Observed PD value\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-publications.html","id":"acop-2024","dir":"Articles","previous_headings":"","what":"ACOP 2024","title":"NMsim Related Publications","text":"NMsim - Seamless Nonmem Simulation Platform R (Poster T32) Authors: Philip Delff code NMsim - Seamless NONMEM Simulation Platform R Received ISoP PMx DATA PROGRAMMING SIG AWARD DOI 10.70534/PGJU4426 Building Automated Pharmacometrics Analysis Workflows R NMsim (Poster T49) Authors: Boris Grinshpun, Samer Mouksassi, Philip Delff Code forest plots available Simulation-based forest plots NMsim. Code produce VPC plots, see VPC simulations. Simulation clinical trial predictions model uncertainty using NMsim (Poster T110) Authors: Sanaya Shroff, Philip Delff DOI 10.70534/BJFX9709 Simulate modified Nonmem models using NMsim (Poster T19) Authors: Simone Cassani, Jahidur Rashid, Christopher Banker, Philip Delff DOI 10.70534/DEWR9935 Model-Based Simulation Workflow Enables Automated Accurate Generation Clinical Pharmacology Summary Statistics (Poster T103) Authors: Brian M. Reilly Pharm.D., Ph.D., Philip H. Delff, Ph.D. DOI 10.70534/BBPP7391","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-speed.html","id":"most-common-reasons-for-nmsim-to-fail-or-be-slow","dir":"Articles","previous_headings":"","what":"Most common reasons for NMsim to fail or be slow","title":"NMsim and speed","text":"NMsim fails behaves unexpectedly, make sure read output Nonmem R console. NMsim complains find output tables, likely Nonmem failed generate . variable used Nonmem must defined either inside model data set. may covariate estimated model include simulation data set - simulation break. Sometimes estimation models include variables output tables used anything else Nonmem read input data set printed output tables. Imagine cleverly included unique row identifier called ROW estimation data set listed $TABLE reliably combine input output data. used anything else data. customize output table NMsim() using table.vars argument simulation input data set include numeric ROW column, get error: Nonmem gets writing $TABLE find variable called ROW. remember, NMsim normally need row identifier combine input output data. many cases, best way fix reduce $TABLE section using table.vars argument. need simulation results population individual predictions anyway. omitted ROW input data set done something simple table.vars can help avoid many problems. NMsim slow, large low-hanging fruit. benchmark example, reduced (large) simulation run time ~1.5 hours ~7 minutes way.","code":"Starting NMTRAN    AN ERROR WAS FOUND IN THE CONTROL STATEMENTS.   AN ERROR WAS FOUND ON LINE 60 AT THE APPROXIMATE POSITION NOTED:  $TABLE ROW TVKA TVV2 TVV3 TVCL KA V2 V3 CL Q PRED IPRED Y NOPRINT FILE=NMsim_xgxr021_noname.tab          X    THE CHARACTERS IN ERROR ARE: ROW   479  THIS ITEM IS NOT LISTED IN MODULE NMPRD4 AND MAY NOT BE DISPLAYED. cp: cannot stat 'NMsim_xgxr021_noname.tab': No such file or directory Error in NMscanTables(file, quiet = TRUE, as.fun = \"data.table\", col.row = col.row,  :    NMscanTables: File not found: /home/philip/R/x86_64-pc-linux-gnu-library/4.2/NMsim/examples/nonmem/NMsim/xgxr021_noname/NMsim_xgxr021_noname.tab. Did you copy the lst file but forgot table file? Results could not be read. simres <- NMsim(file.mod=file.mod,                 data=dat.sim,                 table.vars=\"PRED IPRED Y\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-speed.html","id":"speeding-up-large-simulations","dir":"Articles","previous_headings":"","what":"Speeding up large simulations","title":"NMsim and speed","text":"NMsim() offers powerful way parallellize mutually independent simulations. typically distinct subjects can simulated without regard . simple way split data set list data sets pass list NMsim() data argument.","code":"library(NMsim) library(data.table)  dose1 <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),                        addl=list(ADDL=c(0,5),II=c(0,24)),CMT=1,col.id=NA,                        as.fun=\"data.table\") doses <- dose1[,.(ID=1:1000),by=dose1] dat.sim <- NMaddSamples(doses,TIME=0:(24*7),CMT=2)   ## say dt.sim is a large data set with 1000 subjects. We want 10 data ## sets with 100 subjects in each. dat.sim$IDGRP <- (dat.sim$ID-1)%/%100+1 ## Now IDGRP is the grouping of the ID's as.data.table(dat.sim)[,.(minID=min(ID),maxID=max(ID)),by=IDGRP]  ### with data.table, we easily split the data in a list of data.tables based on that grouping variable data.multiple <- split(dt.sim,by=\"IDGRP\")  ## using sge=TRUE we are now sending the run to the cluster as 10 parellel Nonmem runs. path.multidata <- NMsim(file.mod,                           data=data.multiple                          ,table.vars=c(\"PRED\",\"IPRED\",\"Y\"),                          ,name.sim=\"datalist_01\"                          ,sge=TRUE                           ) ### If we want to wait and read the results when they are ready, use wait=TRUE. NMsim will automatically combine them into one data set as if they were from just one Nonmem run. simres <- NMreadSim(path.multidata,wait=TRUE)"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-varyPars.html","id":"other-relevant-material","dir":"Articles","previous_headings":"","what":"Other relevant material","title":"Simulate with modified parameter values","text":"Please note following ACOP2024 poster recent comprehensive document:Simulate modified Nonmem models using NMsim (Poster T19) Authors: Simone Cassani, Jahidur Rashid, Christopher Banker, Philip Delff","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-varyPars.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulate with modified parameter values","text":"vignettes aims enabling use NMsim following purposes Simulation parameters modified estimated values","code":""},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-varyPars.html","id":"vary-parameter-values","dir":"Articles","previous_headings":"","what":"Vary parameter values","title":"Simulate with modified parameter values","text":"Sometimes want simulate modification estimated model. NMsim can make user-specified modifications model simulating modify.model argument. SAD study run fast solution formulation. want see slower absorption rate affect PK prediction multiple dose regimen. model estimate, TVKA=2.17. now try four times slower absorption: Notice, NMsim 0.1.0, modify.model argument called list.sections. helper functions add overwrite introduced NMsim 0.1.3. , custom modification functions provided like described section “Edit control stream using customized functions”.  used modify.model modify $PK section. used append two lines. use modify section model, essentially modification. However, appending $PK $PRED simple often robust flexible enough. spcific analysis one specific KA value. often convenient control numeric changes model using simulation input data set rather hard-coding numerical values modify.model. following tries number fold changes KA.","code":"file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\") dat.sim <- read.csv(system.file(\"examples/derived/dat_sim1.csv\",package=\"NMsim\"))  simres <- NMsim(file.mod=file.mod                ,data=dat.sim                ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                ,name.sim=\"original\"                ,seed.R=12345                 )  simres.slowabs <- NMsim(file.mod=file.mod,                         data=dat.sim                        ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                        ,name.sim=\"slower_abs\"                        ,seed.R=12345                        ##,modfiy.model=list(PK=function(x)c(x,\"TVKA=TVKA/4\",\"KA=KA/4\"))                        ,modify.model=list(PK=add(\"TVKA=TVKA/4\",\"KA=KA/4\"))                         ) rbind(simres,simres.slowabs) |>     ggplot(aes(TIME,PRED,colour=model))+     geom_line() setDT(dat.sim) ## this repeats dat.sim for each of the values in KASCAL - effectively ## an outer join dat.sim.varka <- dat.sim[,data.table(KASCALE=c(1,4,10)),by=dat.sim] dat.sim.varka[,ID:=.GRP,by=.(KASCALE,ID)] setorder(dat.sim.varka,ID,TIME,EVID) simres.varka <- NMsim(file.mod=file.mod,                       data=dat.sim.varka                      ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                      ,name.sim=\"varka\"                      ,seed=12345                      ## ,modify.model=list(PK=function(x)c(x,\"TVKA=TVKA/KASCALE\",\"KA=KA/KASCALE\"))                      ,modify.model=list(PK=add(c(\"TVKA=TVKA/KASCALE\",\"KA=KA/KASCALE\")))                       ) ggplot(simres.varka[simres.varka$EVID==2,],aes(TIME,PRED,colour=factor(KASCALE)))+ geom_line()+ labs(colour=\"Fold absorption prolongation\")"},{"path":"https://NMautoverse.github.io/NMsim/articles/NMsim-varyPars.html","id":"edit-control-stream-using-customized-functions","dir":"Articles","previous_headings":"","what":"Edit control stream using customized functions","title":"Simulate with modified parameter values","text":"modify.model argument can used apply customized functions control stream sections. example , used exactly creating custom function adds two lines (text strings vector text strings representing line control stream) can use difference custom function modify TVKA first defined control stream. following uses regular expression substitute","code":"modify.model=list(PK=add(c(\"TVKA=TVKA/KASCALE\",\"KA=KA/KASCALE\"))) modify.model=list(PK=function(x)c(x,\"TVKA=TVKA/KASCALE\",\"KA=KA/KASCALE\")) simres.varka2 <- NMsim(file.mod=file.mod,                       data=dat.sim.varka                      ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                      ,name.sim=\"varka2\"                      ,seed.R=12345                      ,modify.model=list(PK=function(x) {                          ## identify line number if first definition of TVKA                          idx.line1.TVKA <- min(grep(\" *TVKA *=\",x))                          ## add /KASCALE after dropping potential comments                          x[idx.line1.TVKA] <- paste(sub(\";.*\",\"\",x[idx.line1.TVKA]),\"/KASCALE\")                          x})                       ) simres.both <- rbind(simres.varka[,method:=\"add()\"],                      simres.varka2[,method:=\"custom/sub()\"]                      )  ggplot(simres.both[EVID==2],aes(TIME,PRED,colour=factor(KASCALE)))+ geom_line()+     labs(colour=\"Fold absorption prolongation\")+     facet_wrap(~method)"},{"path":"https://NMautoverse.github.io/NMsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philip Delff. Author, maintainer. Brian Reilly. Contributor. Sanaya Shroff. Contributor. Boris Grinshpun. Contributor.","code":""},{"path":"https://NMautoverse.github.io/NMsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delff P (2025). NMsim: Seamless 'Nonmem' Simulation Platform. R package version 0.2.3, https://NMautoverse.github.io/NMsim/.","code":"@Manual{,   title = {NMsim: Seamless 'Nonmem' Simulation Platform},   author = {Philip Delff},   year = {2025},   note = {R package version 0.2.3},   url = {https://NMautoverse.github.io/NMsim/}, }"},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"nmsim","dir":"","previous_headings":"","what":"Seamless Nonmem Simulation Platform","title":"Seamless Nonmem Simulation Platform","text":"Please make sure read NMsim website can browse several vignettes examples specific topics. NMsim R package can simulate Nonmem models (using NMsim function) based just simulation data set path estimation control stream. retrive combine output tables input data Nonmem finished return results R. interface “seamless” fully integrated R. Run simulation (estimated) model stored “path//file.mod” using simulation input data set stored variable data.sim way: quickly learn models, can’t wait see working, can following: dir.sims may needed model case may read-location. Notice, working Nonmem model long provided simulation data set sufficient run . ready plot:  example simulation multiple dose regimen loading dose using model estimated single dose data. first vignette NMsim-intro.html. Go next get started NMsim.","code":"simres <- NMsim(file.mod=\"/path/to/file.mod\",                 data=data.sim) data.sim <- read.csv(system.file(\"examples/derived/dat_sim1.csv\",package=\"NMsim\")) simres <- NMsim(file.mod=system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\"),                 data=data.sim,                 dir.sims=\".\") library(ggplot2) datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y))  ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")"},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Seamless Nonmem Simulation Platform","text":"NONMEM offers great flexibility estimation PK PK/PD models, many users find simulation features NONMEM insufficient turn alternative software simulation. leads additional work model reimplementation, risk simulation model deviating estimated model, due bugs reimplementation. wide range model types, limitation NONMEM’s ability perform simulations, rather lack simple user-interface obtain simulations. NMsim provides interface R package, allowing modeler simulate models soon estimate available. goal NMsim automate NONMEM simulation workflow provide simple, flexible, powerful R interface. allows automation simulation-based analyses.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"supported-types-of-simulations","dir":"","previous_headings":"","what":"Supported types of simulations","title":"Seamless Nonmem Simulation Platform","text":"NMsim flexible way define simulation methods. following methods currently provided: Simulation new subjects (default explicitly method.sim=NMsim_default) Simulation subjects already estimated Nonmem model (method.sim=NMsim_EBE) Simulation parameter uncertainty based Nonmem covariance step (method.sim=NMsim_VarCov method.sim=NMsim_NWPRI) Simulation “” case already prepared simulation control stream just want automate use combination simulation data sets (method.sim=NMsim_asis) addition, NMsim provides features modify simulation control stream Simulate typical subjects ETAs equal 0 (typical=TRUE) Specify parameter values, final estimates (inits argument) Custom modification control stream sections (modify argument) learn run simulations Nonmem models, get started NMsim-intro.html. really easy. addition, NMsim can simulate multiple models time. E.g., bootstrap run model available, NMsim can run simulation bootstrap models collect results one dataset. provides robust easy way simulate Nonmem model uncertainty. can also write methods, Nonmem-based simulation (job) want automate using NMsim. Many features available. Prominent ones : Efficient simulation data set creation functions Provides simple interface NMreadSim() read previously performed simulation results. Results file can reused available using reuse.results=TRUE. Can use submit jobs clusters. can wait simulations done automatically collect results. Simulation replicates using Nonmem SUBPROBLEMS feature avaible subproblems argument Simulations models transformed observations can automatically transformed back using transform argument. residual variability implemented simulated model, NMsim provides way (addResVar()) add residual variability R simulation run.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"how-nmsim-works","dir":"","previous_headings":"","what":"How NMsim works","title":"Seamless Nonmem Simulation Platform","text":"NMsim simulate, translate otherwise interpret NONMEM model. Instead, automates NONMEM simulation workflow (including execution NONMEM) wraps one R function. Provided path NONMEM control stream data.frame simulate, NMsim following: Save simulation input data csv file NONMEM Create simulation input control stream based file.mod ($INPUT $DATA matching saved simulation data set; $SIMULATE instead $ESTIMATION $COVARIANCE) Update fix initial values based estimate (file.ext) Run NONMEM generated simulation control stream Collect output data tables, combine , merge simulation input data Return collected data R NMsim can call NONMEM directly via PSN. NMsim run system NONMEM executed, NMsim can still prepare simulation control stream datafile. NMsim relatively small R package. makes extensive use functionality handle NONMEM data control streams provided R package NMdata.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"supported-model-types","dir":"","previous_headings":"","what":"Supported model types","title":"Seamless Nonmem Simulation Platform","text":"methods currently provided NMsim work (many ) Pop PK models continuous-scale PD models. Methods currently provided time--event models. Also, depending coding models, censored data models may work box, model may single variable (Nonmem) simulates wanted information data rows, interpretation may depend values. input data set must contain whatever variables needed Nonmem model. common issue Nonmem model uses covariate simulation input data set. NMdata’s NMcheckData good help identifying input data issues running Nonmem - Nonmem acts unexpectedly.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"nmsim-and-speed","dir":"","previous_headings":"","what":"NMsim and speed","title":"Seamless Nonmem Simulation Platform","text":"Nonmem may fastest simulator . actually often, reason Nonmem slow providing simulation result takes long time writing $TABLE files (yes, can account 90% time Nonmem spends). NMsim provides simple way get around . argument text.table can used define columns needed simulation output (may little PRED, IPRED, couple - remember input data merged back automatically). result, NMsim may still slower re-implementation different framework. ’s extremely easy .","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Seamless Nonmem Simulation Platform","text":"NMsim dependent running Nonmem. Often, mean Nonmem must available system one running R. However, Nonmem run separate system qsub another way initiates Nonmem another system, work . however, R can read file system Nonmem writes results, can retrieve results. NMsim need PSN can use . However, features available PSN, features specify path Nonmem executable (say path.nonmem=/path//nmfe75 Nonmem executable want use). Specifically simulation types currently available, simulation known subjects possible using PSN (works Nonmem executable provided). PSN used, NMsim uses PSN’s execute run models. addition, NMsim default uses PSN’s update_inits update initial values control streams, PSN available. NMsim also include simple function PSN available.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"is-nmsim-reliable","dir":"","previous_headings":"","what":"Is NMsim reliable?","title":"Seamless Nonmem Simulation Platform","text":"Importantly, NMsim (least default) modify, translate simulate model . modify control stream sections $INPUT, $DATA, $ESTIMATION, $SIMULATION, $THETA, $OMEGA, $SIGMA, $TABLE needed. fact NMsim allows skipping re-implementation just uses Nonmem simulate Nonmem model , eliminates risk discrepancies estimated model simulated model. produced control stream saved together simulation data set open manual inspection can obviously run Nonmem independently NMsim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"easily-create-simulation-datasets","dir":"","previous_headings":"","what":"Easily create simulation datasets","title":"Seamless Nonmem Simulation Platform","text":"NMsim includes functions (NMcreateDoses addEVID2) easily create simulation data sets. one certainly need use functions use NMsim, add package providing framework enables complete simulation workflow 5-15 simple lines R code.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"run-nonmem-from-r","dir":"","previous_headings":"","what":"Run Nonmem from R","title":"Seamless Nonmem Simulation Platform","text":"several packages can , NMsim may best choice feature looking . However, running Nonmem using NMexec() function provided NMsim one important advantage saves input data together Nonmem control streams. ensures output data can merged input data went model, even input data file modified lost. Saves input data Nonmem model Provides simple R command submission Nonmem jobs Optionally handles cluster configuration Saves xml file default NMexec submit model runs cluster default. can switched running Nonmem locally. Please notice jobs submitted cluster specific way using PSN. setup different, now supported. Please use NMexec(sge=FALSE) case (may desirable). Notice simulations done cluster default may still able use NMsim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Seamless Nonmem Simulation Platform","text":"NMsim CRAN, MPN github:","code":"## From CRAN/MPN repositories install.packages(\"NMsim\") ## From github library(remotes) install_github(\"NMautoverse/NMsim\")"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Add simulation (sample) records to dosing records — NMaddSamples","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"Adds simulation events subjects data set. Copies columns varying subject level (.e. non-variying covariates). Can add simulation events relative previous dosing time. function previously called `addEVID2()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"","code":"NMaddSamples(   data,   TIME,   TAPD,   CMT,   EVID,   DV,   col.id = \"ID\",   args.NMexpandDoses,   unique = TRUE,   by,   quiet = FALSE,   as.fun,   doses,   time.sim,   extras.are.covs )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"data Nonmem-style data set. using `TAPD` `EVID` column must contain 1 dosing records. TIME numerical vector simulation times. Can also data.frame case must contain `TIME` column merged `data`. TAPD numerical vector simulation times, relative previous dose. used, `data` must contain rows `EVID=1` events `TIME` column. `TAPD` can also data.frame case must contain `TAPD` column merged `data`. CMT compartment insert EVID=2 records. Required `CMT` column `data`. longer one, records repeated specified compartments. data.frame, covariates can specified. EVID value put `EVID` column created rows. Default 2 0 may prefered even simulation. DV Optionally provide single value assigned `DV` column. default assign nothing result `NA` samples stacked (`rbind`) `data`. assign different value `DV`, default value `EVID` changes `0`, `MDV` `0` instead `1`. example useful generating datasets `$DESIGN` `DV=0` often used. col.id name column `data` holds unique subject identifier. args.NMexpandDoses relevant - likely needed - data contains ADDL II columns. columns included, `NMaddSamples()` use `NMdata::NMexpanDoses()` evaluate time dose. `data` argument, `NMaddSamples()` relies default `NMexpanDoses()` argument values. insufficient, can specify argument values list, can call `NMdata::NMexpanDoses()` manually calling `NMaddSamples()`. unique `TRUE` (default), events reduced unique time points insertion. Sometimes, easier combine sequences time points overlap (maybe across `TIME` `TAPD`), let `NMaddSamples()` clean . want keep duplicated events, use `unique=FALSE`. TIME /`TAPD` `data.frame`s contain columns `TIME` /`TAPD`, default follow `TIME`/`TAPD` records. Think record-level variables, like `VISIT`. exception `col.id` - subject identifier present, merged . additional columns used merge , can use `` argument. useful generate differentiated sampling schemes subsets subjects (like regimen=\"SAD\" regimen=\"MAD\"). columns `TIME` /`TAPD` merged , use `=FALSE`. can also specify selected `` variables like `=\"ID\"` `=c(\"ID\",\"regimen\")` See examples. quiet Suppress messages? Default `FALSE`. .fun default return data `data.frame`. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use `.fun=\"data.table\"`. default can configured using `NMdataConf()`. doses Deprecated. Use `data`. time.sim Deprecated. Use `TIME`. extras..covs Deprecated. Use ``.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"data.frame dosing records using column names covs.data (data) TIME. rows TIME get reused matches column names common covs.data - identified subject-level covariates (col.id). exception TIME column , case single dose, TIME carried .","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"resulting data set ordered ID, TIME,     EVID. may reorder specific needs.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMaddSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add simulation (sample) records to dosing records — NMaddSamples","text":"","code":"(doses1 <- NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1))) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 NMaddSamples(doses1,TIME=seq(0,28,by=4),CMT=2) #>    ID TIME EVID CMT AMT MDV #> 1   1    0    1   1   2   1 #> 2   1    0    2   2  NA   1 #> 3   1    4    2   2  NA   1 #> 4   1    8    2   2  NA   1 #> 5   1   12    1   1   1   1 #> 6   1   12    2   2  NA   1 #> 7   1   16    2   2  NA   1 #> 8   1   20    2   2  NA   1 #> 9   1   24    1   1   1   1 #> 10  1   24    2   2  NA   1 #> 11  1   28    2   2  NA   1 #> 12  1   36    1   1   1   1  ## two named compartments dt.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) dt.cmt <- data.frame(CMT=c(2,3),analyte=c(\"parent\",\"metabolite\")) res <- NMaddSamples(dt.doses,TIME=seq.time,CMT=dt.cmt)  ## Separate sampling schemes depending on covariate values dt.doses <- NMcreateDoses(TIME=data.frame(regimen=c(\"SD\",\"MD\",\"MD\"),TIME=c(0,0,12)),AMT=10,CMT=1)  seq.time.sd <- data.frame(regimen=\"SD\",TIME=seq(0,3)) seq.time.md <- data.frame(regimen=\"MD\",TIME=c(0,12,24)) seq.time <- rbind(seq.time.sd,seq.time.md) NMaddSamples(dt.doses,TIME=seq.time,CMT=2,by=\"regimen\") #>    ID TIME EVID CMT AMT MDV regimen #> 1   1    0    1   1  10   1      SD #> 2   1    0    2   2  NA   1      SD #> 3   1    1    2   2  NA   1      SD #> 4   1    2    2   2  NA   1      SD #> 5   1    3    2   2  NA   1      SD #> 6   2    0    1   1  10   1      MD #> 7   2    0    2   2  NA   1      MD #> 8   2   12    1   1  10   1      MD #> 9   2   12    2   2  NA   1      MD #> 10  2   24    2   2  NA   1      MD  ## All subjects get all samples NMaddSamples(dt.doses,TIME=seq.time,by=FALSE,CMT=2) #>    ID TIME EVID CMT AMT MDV regimen #> 1   1    0    1   1  10   1      SD #> 2   1    0    2   2  NA   1      SD #> 3   1    0    2   2  NA   1      MD #> 4   1    1    2   2  NA   1      SD #> 5   1    2    2   2  NA   1      SD #> 6   1    3    2   2  NA   1      SD #> 7   1   12    2   2  NA   1      MD #> 8   1   24    2   2  NA   1      MD #> 9   2    0    1   1  10   1      MD #> 10  2    0    2   2  NA   1      SD #> 11  2    0    2   2  NA   1      MD #> 12  2    1    2   2  NA   1      SD #> 13  2    2    2   2  NA   1      SD #> 14  2    3    2   2  NA   1      SD #> 15  2   12    1   1  10   1      MD #> 16  2   12    2   2  NA   1      MD #> 17  2   24    2   2  NA   1      MD  ## an observed sample scheme and additional simulation times df.doses <- NMcreateDoses(TIME=0,AMT=50,addl=list(ADDL=2,II=24)) dense <- c(seq(1,3,by=.1),4:6,seq(8,12,by=4),18,24) trough <- seq(0,3*24,by=24) sim.extra <- seq(0,(24*3),by=2) time.all <- c(dense,dense+24*3,trough,sim.extra) time.all <- sort(unique(time.all)) dt.sample <- data.frame(TIME=time.all) dt.sample$isobs <- as.numeric(dt.sample$TIME%in%c(dense,trough)) dat.sim <- NMaddSamples(dt.doses,TIME=dt.sample,CMT=2)  ## TAPD - time after previous dose df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) NMaddSamples(df.doses,TAPD=seq.time,CMT=2) #>   ID TIME EVID CMT AMT MDV TAPD #> 1  1    0    1   1  10   1   NA #> 2  1    0    2   2  NA   1    0 #> 3  1    4    2   2  NA   1    4 #> 4  1   12    1   1  10   1   NA #> 5  1   12    2   2  NA   1    0 #> 6  1   16    2   2  NA   1    4 #> 7  1   24    2   2  NA   1   12 #> 8  1   36    2   2  NA   1   24  ## TIME and TAPD df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) NMaddSamples(df.doses,TIME=seq.time,TAPD=3,CMT=2) #>   ID TIME EVID CMT AMT MDV TAPD #> 1  1    0    1   1  10   1   NA #> 2  1    0    2   2  NA   1   NA #> 3  1    3    2   2  NA   1    3 #> 4  1    4    2   2  NA   1   NA #> 5  1   12    1   1  10   1   NA #> 6  1   12    2   2  NA   1   NA #> 7  1   15    2   2  NA   1    3 #> 8  1   24    2   2  NA   1   NA  ## Using a custom DV value affects EVID and MDV  df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(4) NMaddSamples(df.doses,TAPD=seq.time,CMT=2,DV=0) #>   ID TIME EVID CMT AMT MDV TAPD DV #> 1  1    0    1   1  10   1   NA NA #> 2  1    4    0   2  NA   0    4  0 #> 3  1   12    1   1  10   1   NA NA #> 4  1   16    0   2  NA   0    4  0"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily and flexibly generate dosing records — NMcreateDoses","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"Columns extended repeating last value column needed order match length columns. Combinations different columns can generated specifying covariates columns regimens differ.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"","code":"NMcreateDoses(   TIME,   AMT,   EVID = 1,   CMT = 1,   ADDL = NULL,   II = NULL,   RATE = NULL,   SS = NULL,   addl = NULL,   addl.lastonly = TRUE,   col.id = \"ID\",   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"TIME time dosing events. Required. AMT vector data.frame amounts amount. Required. EVID event ID use doses. Default use EVID=1, EVID might also wanted. CMT Compartment number. Default dose CMT=1. Use `CMT=NA` `CMT=NULL` omit result. ADDL Number additional dose events. Must combination consistent II. Notice length 1, applied last event regimen. II Dosing frequency additional events specified `ADDL`. See `ADDL` . RATE Infusion rate. Optional. SS steady-state flag. Optional. addl list ADDL II applied last dose. may prefered II ADDL depend covariates - see examples. Optional. addl.lastonly ADDL II length 1, apply last event regimen? default `TRUE`. col.id Default denote dosing regimens ID column. name column can modified using argument. Use `col.id=NA` omit column altogether. latter may wanted repeating regimen number subjects running `NMcreateDoses()`. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"data.frame dosing events","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"TIME AMT required. AMT, RATE, SS, II, ADDL,     CMT length 1 longer. max length 1     repeated.  TIME longer , extended     match length TIME. arguments can data.frames     additional columns define distinct dosing regimens -     distinct subject ids. However, covariates applied     ADDL+II, see addl argument see examples. Allowed combinations     AMT, RATE, SS, II :     https://ascpt.onlinelibrary.wiley.com/doi/10.1002/psp4.12404","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily and flexibly generate dosing records — NMcreateDoses","text":"","code":"library(data.table) ## Users should not use setDTthreads. This is for CRAN to only use 1 core. data.table::setDTthreads(1)  ## arguments are expanded - makes loading easy NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1)) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 ## Different doses by covariate NMcreateDoses(TIME=c(0,12,24),AMT=data.table(AMT=c(2,1,4,2),DOSE=c(1,2))) #>   ID TIME EVID CMT AMT MDV DOSE #> 1  1    0    1   1   2   1    1 #> 2  1   12    1   1   4   1    1 #> 3  1   24    1   1   4   1    1 #> 4  2    0    1   1   1   1    2 #> 5  2   12    1   1   2   1    2 #> 6  2   24    1   1   2   1    2 ## Make Nonmem repeat the last dose. This is a total of 20 dosing events. ## The default, addl.lastonly=TRUE means if ADDL and II are of ## length 1, they only apply to last event. NMcreateDoses(TIME=c(0,12),AMT=c(2,1),ADDL=9*2,II=12) #>   ID TIME EVID CMT AMT II ADDL MDV #> 1  1    0    1   1   2 NA   NA   1 #> 2  1   12    1   1   1 12   18   1 dt.amt <- data.table(DOSE=c(100,400)) ## multiple dose regimens.  ## Specifying the time points explicitly dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.1 <- NMcreateDoses(TIME=seq(0,by=24,length.out=7),AMT=dt.amt) doses.md.1$dose <- paste(doses.md.1$DOSE,\"mg\") doses.md.1$regimen <- \"QD\" doses.md.1 #>    ID TIME EVID CMT   AMT MDV DOSE   dose regimen #> 1   1    0    1   1 2e+05   1  100 100 mg      QD #> 2   1   24    1   1 1e+05   1  100 100 mg      QD #> 3   1   48    1   1 1e+05   1  100 100 mg      QD #> 4   1   72    1   1 1e+05   1  100 100 mg      QD #> 5   1   96    1   1 1e+05   1  100 100 mg      QD #> 6   1  120    1   1 1e+05   1  100 100 mg      QD #> 7   1  144    1   1 1e+05   1  100 100 mg      QD #> 8   2    0    1   1 8e+05   1  400 400 mg      QD #> 9   2   24    1   1 4e+05   1  400 400 mg      QD #> 10  2   48    1   1 4e+05   1  400 400 mg      QD #> 11  2   72    1   1 4e+05   1  400 400 mg      QD #> 12  2   96    1   1 4e+05   1  400 400 mg      QD #> 13  2  120    1   1 4e+05   1  400 400 mg      QD #> 14  2  144    1   1 4e+05   1  400 400 mg      QD ## or using ADDL+II dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.2 <- NMcreateDoses(TIME=c(0,24),AMT=dt.amt,addl=data.table(ADDL=c(0,5),II=c(0,24))) doses.md.2$dose <- paste(doses.md.2$DOSE,\"mg\") doses.md.2$regimen <- \"QD\" doses.md.2 #>   ID TIME EVID CMT   AMT II ADDL MDV DOSE   dose regimen #> 1  1    0    1   1 2e+05  0    0   1  100 100 mg      QD #> 2  1   24    1   1 1e+05 24    5   1  100 100 mg      QD #> 3  2    0    1   1 8e+05  0    0   1  400 400 mg      QD #> 4  2   24    1   1 4e+05 24    5   1  400 400 mg      QD ## ADDL and II can be wrapped in a data.frame. This allows including covariates NMcreateDoses(TIME=c(0,12),AMT=c(2,1),addl=data.frame(ADDL=c(NA,9*2),II=c(NA,12),trt=c(\"A\",\"B\"))) #>   ID TIME EVID CMT AMT II ADDL MDV trt #> 1  1    0    1   1   2 NA   NA   1   A #> 2  1   12    1   1   1 NA   NA   1   A #> 3  2    0    1   1   2 NA   NA   1   B #> 4  2   12    1   1   1 12   18   1   B"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateMatLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"Create text lines OMEGA SIGMA Nonmem sections","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateMatLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"","code":"NMcreateMatLines(omegas, as.one.block = FALSE, fix = FALSE, type)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateMatLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"omegas data.table least ``, `j` `value` columns. See `NMdata::NMreadExt` pars element returned function. Must least columns ``, `j`, `value`, `iblock`, `blocksize`, `FIX`. .one.block `TRUE`, values printed one block. `FALSE` (default), matrix separeted blocks based position non-zero -diagonal values. Generally speaking, `OMEGA` matrices (var-cov matrices ETAs), `FALSE`, variance-covariance matrices (like `THETAP`), `TRUE`. fix Include `FIX` lines? `FALSE`, fixing modified. Notice, `fix=TRUE` fix everything - individual parameters controlled. finer control way features, see `NMdata::NMwriteInits()`. type matrix type. `OMEGA` `SIGMA` - case -sensitive. used print say `$OMEGA` front line.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMcreateMatLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"Character vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Nonmem and archive input data with model files — NMexec","title":"Execute Nonmem and archive input data with model files — NMexec","text":"Execute Nonmem within R - optionally default parallel. Archiving input data ensures postprocessing can still reproduced input data files updated.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Nonmem and archive input data with model files — NMexec","text":"","code":"NMexec(   files,   file.pattern,   dir,   sge = TRUE,   input.archive,   nc,   dir.data = NULL,   wait = FALSE,   path.nonmem,   update.only = FALSE,   fun.post,   method.execute,   dir.psn,   args.psn.execute,   files.needed,   clean = 1,   backup = TRUE,   quiet = FALSE,   nmquiet = FALSE,   system.type )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Nonmem and archive input data with model files — NMexec","text":"files File paths models (control streams) run nonmem . See file.pattern . file.pattern Alternatively files, can supply regular expression passed list.files pattern argument. used, use dir argument well. Also see data.file process models use specific data file. dir file.pattern used, dir directory search control streams . sge Use sge queing system. Default TRUE. Disable quick models wait queue run job. input.archive function model file path generate path archive input data RDS. Set FALSE archive data. nc Number cores use sending cluster. used method.execute=\"psn\", sge=TRUE. Default 64. dir.data directory data file stored. normally needed data found using path control stream. argument may removed future since needed. wait Wait process finish making R console available ? useful calling NMexec function needs wait output Nonmem run available processing. path.nonmem path nonmem executable. used method.execute=\"direct\" method.execute=\"nmsim\" (default). argument supplied, NMexec try run nmfe75, .e. available path underlying shell. default value can modified using NMdata::NMdataConf, like NMdataConf(path.nonmem=\"/path//nonmem\") update.run model(s) control stream data updated since last run? fun.post function path control stream (`file.mod`) generates bash code evaluated Nonmem done. can used automatically run goodness--fit script simulation script model estimation. method.execute run Nonmem. Must one 'psn',     'nmsim', 'direct'. psn PSN's execute used. supports parallel Nonmem runs. Use nc argument control many cores use job. estimation runs, likely better choice, PSN installed. See dir.psn argument . nmsim Creates temporary directory runs Nonmem inside directory copying relevant results files back folder input control stream . sge=TRUE, job submitted cluster, parallel execution job supported. See path.nonmem argument . direct Nonmem called directly control stream. simplest method least convenient cases. offer parallel runs leaves Nonmem output files next control streams. See `sge` well. dir.psn directory find PSN executables. needed searchable system path, user want explicit find (.e. want use specific installed version PSN). args.psn.execute character string arguments passed execute. Default \"-model_dir_name -nm_output=coi,cor,cov,ext,phi,shk,xml\". files.needed case method.execute=\"nmsim\", argument specifies files copied temporary directory Nonmem run. Input control stream simulation input data need specified. clean degree cleaning (file removal) Nonmem execution. `method.execute==\"psn\"`, passed PSN's `execute`. `method.execute==\"nmsim\"` similar behavior applied, even though granular. NMsim's internal method distinguishes 0 (cleaning), integer 1-4 (default, quite bit cleaning) 5 (remove temporary dir completely). backup running, existing results files backed sub directory? , files deleted running. quiet Suppress messages NMexec ? Default FALSE. nmquiet Suppress terminal output `Nonmem`. likely work linux/unix systems. system.type charachter string, either \\\"windows\\\" \\\"linux\\\" - case insensitive. Windows experimentally supported. Default use Sys.info()[[\"sysname\"]].","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute Nonmem and archive input data with model files — NMexec","text":"NULL (invisibly)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute Nonmem and archive input data with model files — NMexec","text":"Use read archived input data retrieving     nonmem results:     NMdataConf(file.data=inputArchiveDefault) Since `NMexec` typically used simulations directly (`NMsim` natural interface purpose), default method `NMexec` currently use `method.execute=\"psn\"` point methods allow multi-core execution single Nonmem job (NB: `method.execute=\"NMsim\"` can run multiple jobs parallel normally sufficient simulations).","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute Nonmem and archive input data with model files — NMexec","text":"","code":"file.mod <- \"run001.mod\" if (FALSE) { # \\dontrun{ ## run locally - not on cluster NMexec(file.mod,sge=FALSE) ## run on cluster with 16 cores. 64 cores is default NMexec(file.mod,nc=16) ## submit multiple models to cluster multiple.models <- c(\"run001.mod\",\"run002.mod\") NMexec(multiple.models,nc=16) ## run all models called run001.mod - run099.mod if updated. 64 cores to each. NMexec(file.pattern=\"run0..\\\\.mod\",dir=\"models\",nc=16,update.only=TRUE) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexecDirectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Nonmem inside a dedicated directory — NMexecDirectory","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"Like PSN's execute less features. easier control NMexec. NMexecDirectory intended run user. Use NMexec NMsim instead.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexecDirectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"","code":"NMexecDirectory(   file.mod,   path.nonmem,   files.needed,   dir.data = \"..\",   system.type,   clean,   sge = nc > 1,   nc = 1,   pnm,   fun.post = NULL )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexecDirectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"file.mod Path Nonmem input control stream. path.nonmem Path Nonmem executable. may want control NMdata::NMdataConf. files.needed Files needed run control stream. cold .phi file etas read. Notice, input data set handled automatically, need specify . dir.data NULL, data copied temporary directory, Nonmem read . NULL, dir.data must relative path Nonmem run input data file stored. \"..\" run directory created directory data stored. clean degree cleaning (file removal) Nonmem execution. `method.execute==\"psn\"`, passed PSN's `execute`. `method.execute==\"nmsim\"` similar behavior applied, even though granular. NMsim's internal method distinguishes 0 (cleaning), integer 1-4 (default, quite bit cleaning) 5 (remove temporary dir completely).","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMexecDirectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"bash shell script execution Nonmem","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMgenPNM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PNM file for sge clusters — NMgenPNM","title":"Generate PNM file for sge clusters — NMgenPNM","text":"Generate PNM file sge clusters","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMgenPNM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PNM file for sge clusters — NMgenPNM","text":"","code":"NMgenPNM(nc, file)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMgenPNM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PNM file for sge clusters — NMgenPNM","text":"nc number cores wanted file file path write result ","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMgenPNM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PNM file for sge clusters — NMgenPNM","text":"file path (character string)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadFilters.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data filters from a NONMEM model — NMreadFilters","title":"Read data filters from a NONMEM model — NMreadFilters","text":"Read data filters NONMEM model","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadFilters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data filters from a NONMEM model — NMreadFilters","text":"","code":"NMreadFilters(file, lines, filters.only = TRUE, as.fun)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadFilters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data filters from a NONMEM model — NMreadFilters","text":"file Control stream path lines Control stream lines already read file filters.Return filters also return remaining text separate object? `FALSE`, list two objects returned. .fun Function run tables filters.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results based on NMsim's track of model runs — NMreadSim","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"Read simulation results based NMsim's track model runs","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"","code":"NMreadSim(   x,   check.time = FALSE,   dir.sims,   wait = FALSE,   quiet = FALSE,   progress,   rm.tmp = FALSE,   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"x Path simulation-specific rds file generated NMsim, typically called `NMsim_MetaData.rds`. Can also table simulation runs stored `rds` files `NMsim`. latter almost never used. check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_MetaData.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_MetaData.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model read. progress tracking based number models completed/read, status individual models. rm.tmp results read successfully, remove temporary simulation results files? can useful script developed intermediate debugging information needed. cleans saves significant disk space. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"data set class defined .fun","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"Read simulation results rds objects /NMsimModTab objects","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"","code":"NMreadSimModTab(   x,   check.time = FALSE,   dir.sims,   wait = FALSE,   skip.missing = FALSE,   quiet = FALSE,   progress,   read.fst = NULL,   fast.tables = NULL,   carry.out = NULL,   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"x Path simulation-specific rds file generated NMsim, typically called `NMsim_MetaData.rds`. Can also table simulation runs stored `rds` files `NMsim`. latter almost never used. check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_MetaData.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_MetaData.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model simulated. progress tracking based number models completed, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTabOne.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"Read simulation results rds NMsimModTab object","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTabOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"","code":"NMreadSimModTabOne(   modtab,   check.time = FALSE,   dir.sims,   wait = FALSE,   quiet = FALSE,   skip.missing = FALSE,   progress,   read.fst = NULL,   fast.tables = NULL,   carry.out = NULL,   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimModTabOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_MetaData.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_MetaData.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model read. progress tracking based number models completed/read, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from data.frames or fst files — NMreadSimRes","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"Read simulation results data.frames fst files","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"","code":"NMreadSimRes(x)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"x data set fst file","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimResOne.html","id":null,"dir":"Reference","previous_headings":"","what":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"read one sim element. run lapply NMreadSim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimResOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"","code":"NMreadSimResOne(x)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimResOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"x path fst file data set","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSimResOne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"data.table","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SIZES info from a control stream — NMreadSizes","title":"Read SIZES info from a control stream — NMreadSizes","text":"Read SIZES info control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SIZES info from a control stream — NMreadSizes","text":"","code":"NMreadSizes(file.mod = NULL, lines = NULL)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreadSizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SIZES info from a control stream — NMreadSizes","text":"file.mod Control stream path. lines Character vector control stream file.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreplaceInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace initial values in Nonmem control stream — NMreplaceInits","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"Replace initial values Nonmem control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreplaceInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"","code":"NMreplaceInits(inits, fix = FALSE, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreplaceInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"inits data.frame new initial estimates, style returned NMdata::NMreadExt. Column` par.type` can contain elements THETA, OMEGA, SIGMA. ... Passed NMdata::NMwriteSection. important NMreplaceInits run .","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMreplaceInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"modified control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMrunLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to run Nonmem on linux — NMrunLin","title":"Internal function to run Nonmem on linux — NMrunLin","text":"Internal function run Nonmem linux","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMrunLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to run Nonmem on linux — NMrunLin","text":"","code":"NMrunLin(   fn.mod,   dir.mod.abs,   exts.cp,   meta.tables,   path.nonmem,   clean,   sge,   nc,   pnm,   fun.post = NULL )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMrunLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to run Nonmem on linux — NMrunLin","text":"fn.mod Just file name, including path","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMseed.html","id":null,"dir":"Reference","previous_headings":"","what":"Add seed string to simulation model data.table — NMseed","title":"Add seed string to simulation model data.table — NMseed","text":"internal NMsim function.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMseed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add seed string to simulation model data.table — NMseed","text":"","code":"NMseed(models, nseeds, dist, values, fun.seed = seedFunDefault)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMseed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add seed string to simulation model data.table — NMseed","text":"models data.frame containing model paths etc created NMsim(). nseeds Number seeds simulation control stream. Default match length dist. dist Distribution random sources. character strings pasted directly Nonem control streams seed values. Default \"\" means one normal distribution. dist=c(\"\",\"UNIFORM\") give two seeds random sources following normal uniform distribution. values Optionally, seed values. can data.frame many columns random sources.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMseed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add seed string to simulation model data.table — NMseed","text":"updated data.table simulation model information     including seed strings.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from an estimated Nonmem model — NMsim","title":"Simulate from an estimated Nonmem model — NMsim","text":"Supply data set estimation input control stream, NMsim can create neccesary files (control stream, data files), run simulation read results. additional methods simulation types available, can multiple simulations . Please see vignettes introduction get .","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from an estimated Nonmem model — NMsim","text":"","code":"NMsim(   file.mod,   data,   subproblems = NULL,   reuse.results = FALSE,   seed.R,   seed.nm,   name.sim,   table.vars,   table.options,   table.format = \"s1PE16.9\",   carry.out = TRUE,   method.sim = NMsim_default,   typical = FALSE,   inits,   modify,   filters,   sizes,   path.nonmem = NULL,   sge = FALSE,   nc = 1,   execute = TRUE,   script = NULL,   transform = NULL,   order.columns = TRUE,   method.execute,   nmrep,   col.flagn = FALSE,   sim.dir.from.scratch = TRUE,   create.dirs = TRUE,   dir.psn,   args.psn.execute,   args.NMscanData,   as.fun,   system.type = NULL,   dir.sims,   dir.res,   file.res,   wait,   text.sim = \"\",   auto.dv = TRUE,   clean,   quiet = FALSE,   nmquiet,   progress,   check.mod = TRUE,   format.data.complete = \"rds\",   text.table,   suffix.sim,   seed,   file.ext = NULL,   method.update.inits,   modify.model,   list.sections,   ... )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from an estimated Nonmem model — NMsim","text":"file.mod Path(s) input control stream(s) run simulation . output control stream now assumed stored next input control stream ending .lst instead .mod. .ext file must also present. simulating known subjects, .phi necessary . data simulation data data.frame list data.frames. list, model(s) run data sets list. subproblems Number subproblems use SUBPROBLEMS $SIMULATION block Nonmem. default subproblem=0 means use SUBPROBLEMS. reuse.results simulation results found file, used? TRUE reading results fail, simulations still rerun. seed.R value passed set.seed(). recommended use seed.R rather calling set.seed() manually seed can captured stored NMsim() reproducibility. See seed.nm finer control seeds used Nonmem control streams. seed.nm Control Nonmem seeds. numeric, vector     `data.frame`, used seed values (single     value vector recycled make sure dimesnsions     right, number columns data.frame     dictate number seeds Nonmem control stream. Use     list elements `values`, `dist` others     detailed control random sources. See ?NMseed     details arguments can passed way. Default draw seeds betwen     0 2147483647 (values supported Nonmem)     simulation. can pass function evaluated     (say choose different pool seeds draw ). avoid changing exisiting seed control stream, use seed.nm=\"asis\". case method.sim=NMsim_EBE, seeds used. name.sim Give filenames related simulation suffix. short string describing sim recommended like \"ph3_regimens\". table.vars Variables printed output table character vector space-separated string variable names. default export tables listed input control stream. table.vars provided, output tables estimation control streams dropped replaced new one just provided variables. many variables exported, much fewer used, can speed NMsim significantly export needed (sometimes little \"PRED IPRED\"). Nonmem writes data slowly reducing output data can make big difference execution time. See table.options . table.options character vector string space-separated options. used table.vars provided. constructing new output table table.vars default add two options, NOAPPEND NOPRINT. can modify table.options. try modify output filename - NMsim takes care . See `table.format` . table.format format `$TABLE`. used `table.vars` provided. Default \"s1PE16.9\". NMsim needs high-resolution format. Nonmem default \"s1PE11.4\" insufficient simulation data sets 1e5 rows . carry.Variables input data included results. Default include everything. working large data sets, may wanted provide subset columns . large simulations, may also way save memory. method.sim function (quoted) creates simulation control stream necessary files simulation based estimation control stream, data, etc. default called NMsim_default replace estimation covariance step simulation step. See details section oter methods, see examples especially vignettes use different provided methods. typical Run ETAs fixed zero? Technically ETAs=0 obtained replacing $OMEGA zero matrix. Default `FALSE`. inits Control parameter values. `inits` list.     `method` element controls method used ,     corresponds old `method.update.inits` argument.     using new `method=nmsim` can specify parameter     values, fix/unfix , edit lower upper limits     estimation. `method=\"nmsim\"`,     arguments passed `NMwriteInits`. flexible     method allows modification parameter values     expected default method     future. Example update parameter values based     available estimate, `THETA(2)=1.3`:     `inits=list(method=\"nmsim\",\"THETA(2)\"=list(init=1.3))`. See     `?NMwriteInits` . `method=\"psn\"`     uses PSN's \"update_inits\". Requires functioning PSN     installation possibly dir.psn correctly     set. advantages method keeps comments     control stream method known many. `method=\"nmsim\"`  Uses simple internal method update parameter values based ext file.  advantages \"nmsim\" require PSN, rely code-interpretation generation simulation control streams. \"nmsim\" fixes whole OMEGA SIGMA matrices single blocks making $OMEGA $SIGMA sections control streams less easy read. hand, method robust avoids interpretation BLOCK structure code control streams. `method=\"none\"` nothing. useful model simulate estimated parameter values manually put respective sections control stream. See also `file.ext` can now handled `inits` . change collects update \"initial\" parameter values one interface rather multiple arguments. modify Named list additional control stream section edits. Note, can functions define edit sections. advanced feature needed run simulations. however powerful types analyses, like modifying parameter values. See vignettes information. filters Edit data filters (`IGNORE`/`ACCEPT` statements) running model. normally used data set provided. can useful simulating VPC different subset data needs simulated one used estimation. common example inclusion BLQ's VPC even excluded estimation. See `?NMreadFilters` returns table can edit pass `filters`. can also just pass string representing full set filters used. pass string, consider including \"IGN=@\" avoid character rows, like column headers. sizes needed, adjust `$SIZES` section providing list arguments `NMupdateSizes()`. Example: `sizes=list(PD=80)`. See `?NMupdateSizes` details. use arguments like `file.mod` `newfile` handled internally. path.nonmem path Nonmem executable use. something like \"/usr/local/NONMEM/run/nmfe75\" (made example). default available. able figure normally execute Nonmem, ask colleague. sge Submit cluster? Default , useful creating large number simulations, e.g. simulate parameter estimates bootstrap result. nc Number cores used parallelization. used `sge=TRUE`. execute Execute simulation prepare ? `execute=FALSE` can useful want additional tweaks simulate using parameter estimates. script path script run. stamping dataset results can traced back code. transform list defining transformations applied Nonmem simulations plotting. list element, name refers name column transform, contents must function apply. order.columns reorder columns calling NMdata::NMorderColumns saving dataset running simulations? Default TRUE. method.execute Specify call Nonmem. Options \"psn\" (PSN's execute), \"nmsim\" (internal method similar PSN's execute), \"direct\" (just run Nonmem directly dump temporary files). \"nmsim\" advantages \"psn\" makes supported method type.sim=\"NMsim_EBE\". \"psn\" simple advantage path nonmem specified \"execute\" system search path. long know Nonmem executable , \"nmsim\" recommended. default \"nmsim\" path.nonmem specified, \"psn\" . nmrep Include `NMREP` counter subproblems? default `subproblems>0`. insert counter called `NMREP` `$ERROR` section include output table(s). point, nothing done avoid overwriting existing variables. col.flagn used `data` provided. Use including exclusion flag column data. However, NMsim require column equal `0` (zero) rows simulated. often better subset data simulation. See `filters` . sim.dir..scratch TRUE (default) wipe simulation directory running new simulations. directory emptied _not_ dir.sims may keep many simulations. subdirectory named based run name name.sim. reason advised wipe directory previous simulation created simulation runs now obsolete, end reading collecting results. NMsim delete previously generated simulation control streams name, option goes . example important first ran 1000 replications, fixed something now rand 500. choose FALSE , can end results 500 new 500 old simulations. create.dirs directories specified dir.sims dir.res exists, created? Default TRUE. dir.psn directory find PSN's executables ('execute' 'update_inits'). default rely system's search path. can run 'execute' 'update_inits' just typing terminal, need specify unless want explicitly use specific installation PSN system. args.psn.execute charachter string passed arguments PSN's `execute`. args.NMscanData table.options used, NMsim turns `NMdata::NMscanData()` general method read output tables. Use `args.NMscanData` pass additional arguments (list) function want results read specific way. can model reason drops rows, need merge row identifier. `args.NMscanData=list(col.row=\"ROW\")` merge column called `ROW`. used rare cases. Better just stick NMsim's optimized default `table.options` related methods reading results. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf. system.type charachter string, either \\\"windows\\\" \\\"linux\\\" - case insensitive. Windows experimentally supported. Default use Sys.info()[[\"sysname\"]]. dir.sims directory NMsim store generated files. Default create folder called `NMsim` next `file.mod`. dir.res Provide path directory save rds files paths results. Default use dir.sims. running `NMreadSim()` files, original simulation files can deleted. Hence, providing `dir.sims` `dir.res` provides structure simple clean. `dir.sims` can purged `NMreadSim` run small `rds` `fst` files kept `dir.res`. Notice, case multiple models simulated, multiple `rds` (read `NMreadSim()`) files created default. cases multiple models simulated, see `file.res` get just one file refering simulation results. file.res Path rds file contain table simulated models metadata. needed subsequently retrieving results using `NMreadSim()`. default create file called `NMsim_..._MetaData.rds` dir.res directory ... based model name. However, multiple models (file.mod) simulated, result multiple rds files. Specifying path ensures one rds file containing information simulated models created. Notice file.res supplied, dir.res used. wait Wait simulations finish? Default simulations run locally sent cluster. Waiting means results read simulations done. waiting, path(s) `rds` files read returned. Pass `NMreadSim()`. Conveniently, NMreadSim() also takes `wait` argument , allowing flexibility run Nonmem background, read results, still waiting Nonmem finish. text.sim character string pasted $SIMULATION. must contain seed SUBPROBLEM handled separately. Default include \"ONLYSIM\". avoid using `text.sim`. Instead, can use `onlysim=FALSE` passed `NMsim_default()`. auto.dv Add column called `DV` input data sets column name found? Nonmem generally dependent `DV` column input data typically uninformative simulation data sets hence easily forgotten generating simulation data sets. auto.dv=TRUE `DV` column found, `DV=NA` added. case (`auto.dv=TRUE` `DV` column found) `MDV=1` column also added none found. clean degree cleaning (file removal) Nonmem execution. `method.execute==\"psn\"`, passed PSN's `execute`. `method.execute==\"nmsim\"` similar behavior applied, even though granular. NMsim's internal method distinguishes 0 (cleaning), integer 1-4 (default, quite bit cleaning) 5 (remove temporary dir completely). quiet TRUE, messages going suppressed. nmquiet Silent console messages Nonmem? default behaviour depends. FALSE one model execute `progress=FALSE`. progress Track progress? Default `TRUE` `quiet` FALSE one model simulated. progress tracking based number models completed, status individual models. check.mod Check provided control streams contents may cause issues simulation. Default `TRUE`, recommended disable fully aware feature control stream, know impacts simulation, want get rid warnings. format.data.complete development purposes - users need argument. Controls format complete input data set saved .  Possible values `rds` (default), `fst` (experimental) `csv`. `fst` may faster use less disk space factor levels may lost input data output data. `csv` also lead loss additional information factor levels. text.table Deprecated. Use `table.vars` `table.options` instead. suffix.sim Deprecated. Use name.sim instead. seed Deprecated. See seed.R seed.nm. file.ext Depecated. Use `inits=list(file.ext=\"path//file.ext\")` instead. Optionally provide parameter estimate file Nonmem. normally needed since `NMsim` default use ext file stored next input control stream (replacing file name extension `.ext`). using method.update.inits=\"psn\", argument used. method.update.inits Deprecated, please migrate `inits` instead. initial values parameters updated estimated model running simulation. NMsim can native function use PSN - step can skipped update values. modify.model Deprecated. Use modify instead. list.sections Deprecated. Use modify instead. ... Additional arguments passed method.sim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from an estimated Nonmem model — NMsim","text":"data.frame simulation results (number rows     input data). `sge=TRUE` character vector paths     simulation control streams.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from an estimated Nonmem model — NMsim","text":"Loosely speaking, argument method.sim defines     _what_ NMsim , method.execute define _how_     . method.sim takes function converts     estimation control stream whatever     run. Features like replacing `$INPUT`, `$DATA`, `$TABLE`,     handling seeds NMsim features done addition     method.sim. Also modeify.model argument     handled addition method.sim.     subproblems seed.nm arguments available     methods creating $SIMULATION section. Notice, following functions internally available `NMsim` can run say method.sim=NMsim_EBE without quotes. see code method, type NMsim_EBE. NMsim_default default behaviour. Replaces $ESTIMATION $COVARIANCE sections $SIMULATION section. NMsim_asis simplest method. nothing (, NMsim handles `$INPUT`, `$DATA`, `$TABLE` . Use instance already created simulation (estimation actually) control stream want NMsim run different data sets. NMsim_EBE Simulates _known_ ETAs. default, ETA values automatically taken estimation run. refered emperical Bayes estimates, hence name method \"NMsim_EBE\". However, user can also provide different `.phi` file may contain simulated ETA values (see `file.phi` argument). ID values simulation data set must match ID values phi file step work. refering estimated subjects, .phi file estimation run must found next .lst file estimation file name stem (say `run1.lst` `run1.phi`). , ID values (simulation) input data must ID values used estimation . method Runs $ESTIMATION MAXEVAL=0 pulls ETAs ID's found data. $SIMULATION step run unfortunately means residual error simulated. NMsim_VarCov Like NMsim_default `$THETA`, `$OMEGA`, `SIGMA` drawn distribution estimated covariance step. means successful covariance step must available estimation. NB. multivariate normal distribution used parameters, including `$OMEGA` `$SIGMA` correct way . case simulation leads negative diagonal elements $OMEGA $SIGMA, values truncated zero. method valid simulation `$THETA` variability. method accepts table parameter values can produced tools `NMsim`. simulation parameter variability based bootstrap results, use NMsim_default. NMsim_typical Deprecated. Use typical=TRUE instead.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimCheckMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"Check simulation control streams things can cause trouble NMsim","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimCheckMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"","code":"NMsimCheckMod(file.mod, lines)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimCheckMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"file.mod control stream check lines control stream text lines. use `file.mod` `lines`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimModTabOperations.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"Remove NMsimModTab class discard NMsimModTab meta data Check object 'NMsimModTab' Basic arithmetic NMsimModTab objects","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimModTabOperations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"","code":"unNMsimModTab(x)  is.NMsimModTab(x)  # S3 method for class 'NMsimModTab' merge(x, ...)  # S3 method for class 'NMsimModTab' t(x, ...)  # S3 method for class 'NMsimModTab' dimnames(x, ...)  # S3 method for class 'NMsimModTab' rbind(x, ...)  # S3 method for class 'NMsimModTab' cbind(x, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimModTabOperations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"x NMsimModTab object ... arguments passed methods.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimModTabOperations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"x stripped 'NMsimModTab' class logical x 'NMsimModTab' object object class 'NMsimModTab'.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimModTabOperations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"'dimnames', 'merge', 'cbind', 'rbind', 't'     called 'NMsimModTab' object, 'NMsimModTab' class dropped,     operation performed. 'NMsimModTab' object     inherits 'data.frame' classes (    default), operations performed using     'data.frame' methods. example, use '.fun'     get 'data.table' 'tbl', respective methods used     instead.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimResOperations.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"Remove NMsimRes class discard NMsimRes meta data Check object 'NMsimRes' Basic arithmetic NMsimRes objects","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimResOperations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"","code":"unNMsimRes(x)  is.NMsimRes(x)  # S3 method for class 'NMsimRes' merge(x, ...)  # S3 method for class 'NMsimRes' t(x, ...)  # S3 method for class 'NMsimRes' dimnames(x, ...)  # S3 method for class 'NMsimRes' rbind(x, ...)  # S3 method for class 'NMsimRes' cbind(x, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimResOperations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"x NMsimRes object ... arguments passed methods.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimResOperations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"x stripped 'NMsimRes' class logical x 'NMsimRes' object object class 'NMsimRes'.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimResOperations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"'dimnames', 'merge', 'cbind', 'rbind', 't'     called 'NMsimRes' object, 'NMsimRes' class dropped,     operation performed. 'NMsimRes' object     inherits 'data.frame' classes (    default), operations performed using     'data.frame' methods. example, use '.fun'     get 'data.table' 'tbl', respective methods used     instead.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimTestConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize and test NMsim configuration — NMsimTestConf","title":"Summarize and test NMsim configuration — NMsimTestConf","text":"Summarize test NMsim configuration","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimTestConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize and test NMsim configuration — NMsimTestConf","text":"","code":"NMsimTestConf(   path.nonmem,   dir.psn,   method.execute,   must.work = FALSE,   system.type )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimTestConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize and test NMsim configuration — NMsimTestConf","text":"path.nonmem See ?NMsim dir.psn See ?NMsim method.execute See ?NMsim must.work Throw error configuration seem match system. system.type See ?NMsim","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsimTestConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize and test NMsim configuration — NMsimTestConf","text":"list configuration values","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_EBE.html","id":null,"dir":"Reference","previous_headings":"","what":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"Simulation reusing ETA values estimation run otherwise specified ETA values. observed subjects, refered emperical Bayes estimates (EBE). .phi file estimation run must found next .lst file estimation.means ID values (simulation) input data must ID values used estimation . Runs $ESTIMATION MAXEVAL=0 pulls ETAs ID's found data. $SIMULATION step run may affect instance residual variability simulated, . can also specify different .phi file can simulation result.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_EBE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"","code":"NMsim_EBE(file.sim, file.mod, data.sim, file.phi, return.text = FALSE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_EBE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"file.sim path control stream edited. function overwrites contents file pointed file.sim. file.mod Path path original input control stream provided `file.mod` `NMsim()`. data.sim See ?NMsim. file.phi phi file take known subjects . default replace filename extension file.mod .phi. different .phi file used want reuse subjects simulated previous simulation. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_EBE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"Path simulation control stream","code":""},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"Modify control stream simulation uncertainty     using inverse-Wishart distribution OMEGA SIGMA     parameters function run simulations. simulate, using method, see `NMsim()`. See examples.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"","code":"NMsim_NWPRI(file.sim, file.mod, data.sim, PLEV = 0.999, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"file.sim path control stream edited. function overwrites contents file pointed file.sim. file.mod Path path original input control stream provided `file.mod` `NMsim()`. data.sim Included compatibility `NMsim()`. used. PLEV Used $PRIOR NWPRI PLEV=0.999. NONMEM argument NWPRI subroutine. PLEV < 1, value THETA actually obtained using truncated multivariate normal distribution, .e. ellipsoidal region R1   fraction mass normal occurs. fraction given PLEV. ... Additional arguments passed `NMsim_default()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"Path simulation control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"Simulate parameter uncertainty. THETA parameters     sampled multivariate normal distribution OMEGA     SIGMA simulated inverse-Wishart     distribution. Correlations OMEGA SIGMA parameters     applied within modeled \"blocks\".","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"inverse-Wishart degrees freedom calculation OMEGA SIGMA: NONMEM tutorial part II, supplement 1, part C.","code":""},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"Brian Reilly, Philip Delff","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_NWPRI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate with parameter variability using the NONMEM NWPRI subroutine — NMsim_NWPRI","text":"","code":"if (FALSE) { # \\dontrun{ simres <- NMsim(file.path,method.sim=NMsim_WPRI,typical=TRUE,subproblems=500) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_VarCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"Like NMsim_default `$THETA`, `$OMEGA`, `SIGMA` drawn distribution estimated covariance step. successful covariance step must available estimation. case simulation leads negative diagonal elements $OMEGA $SIGMA, values truncated zero. simulation parameter variability based bootstrap results, use NMsim_default. function run simulations. simulate, using method, see `NMsim()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_VarCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"","code":"NMsim_VarCov(   file.sim,   file.mod,   data.sim,   nsims,   method.sample = \"mvrnorm\",   ext,   write.ext = NULL,   ... )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_VarCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"file.sim path control stream edited. function overwrites contents file pointed file.sim. file.mod Path path original input control stream provided `file.mod` `NMsim()`. data.sim Included compatibility `NMsim()`. used. nsims Number replications wanted. default 1. greater, multiple control streams generated. method.sample `ext` used, parameters sampled, using `samplePars()`. `method` must either `mvrnorm` `simpar`. used `ext` provided. ext Parameter values long format created `readParsWide` `NMdata::NMreadExt`. write.ext supplied, path rds file parameter values used simulation saved. ... Additional arguments passed `NMsim_default()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_VarCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"Character vector simulation control stream paths","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_asis.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation method that uses the provided control stream as is — NMsim_asis","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"simplest method. nothing (, NMsim handles `$INPUT`, `$DATA`, `$TABLE` . Use instance already created simulation (estimation actually) control stream want NMsim run different data sets.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_asis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"","code":"NMsim_asis(file.sim, file.mod, data.sim)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_asis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_asis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"Path simulation control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"default behaviour NMsim. Replaces $ESTIMATION $COVARIANCE sections $SIMULATION section.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"","code":"NMsim_default(   file.sim,   file.mod,   data.sim,   nsims = 1,   onlysim = TRUE,   replace.sim = TRUE,   return.text = FALSE )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. nsims Number replications wanted. default 1. greater, multiple control streams generated. onlysim Include `ONLYSIM` `$SIMULATION`? Default `TRUE`. applied `replace.sim=`TRUE`. replace.sim $SIMULATION section contents file.sim, replaced? Default yes. See list.section argument NMsim provide custom contents sections NMsim instead editing control streams beforehand. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"Character vector simulation control stream paths","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_known.html","id":null,"dir":"Reference","previous_headings":"","what":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"NMsim_known old name NMsim_EBE()","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_known.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"","code":"NMsim_known(...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_known.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"... Everything passed NMsim_EBE()","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_known.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"Path simulation control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Typical subject simiulation method — NMsim_typical","title":"Typical subject simiulation method — NMsim_typical","text":"Like NMsim_default ETAs=0, giving \"typical subject\" simulation. confuse \"reference subject\" simulation covariate values. Technically ETAs=0 obtained replacing $OMEGA zero matrix.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typical subject simiulation method — NMsim_typical","text":"","code":"NMsim_typical(file.sim, file.mod, data.sim, return.text = FALSE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typical subject simiulation method — NMsim_typical","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMsim_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typical subject simiulation method — NMsim_typical","text":"Path simulation control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"Create new Nonmem control stream updated initial parameter values","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"","code":"NMupdateInits(file.mod, file.ext, newfile)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"file.mod control stream update. edited. file.ext Path ext file. Default replace extension `file.mod`. newfile New file generate","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"resulting control stream path(s)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateSizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or update $SIZES in a control stream — NMupdateSizes","title":"Create or update $SIZES in a control stream — NMupdateSizes","text":"Update $SIZES parameters control stream. control stream can file provided character vector (file lines).","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateSizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or update $SIZES in a control stream — NMupdateSizes","text":"","code":"NMupdateSizes(   file.mod = NULL,   newfile,   lines = NULL,   wipe = FALSE,   write = !is.null(newfile),   warn = TRUE,   ... )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateSizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or update $SIZES in a control stream — NMupdateSizes","text":"file.mod path control stream. See also alternative `lines` argument. Notice, `write` `TRUE` (default) `newfile` provided, `file.mod` overwritten. newfile optional path write resulting control stream . nothing provided, default overwrite `file.mod`. lines Control stream lines character vector. already read control stream - say using `NMdata::NMreadSection()`, use modify text lines. wipe default behavior (`wipe=FALSE`) add `$SIZES` values existing values found. SIZES parameter names overlapping existing, values updated. `wipe=TRUE`, existing `$SIZES` section disregarded. write Write results `newfile`? warn Warn function deprecated? ... $SIZES parameters. Provided anything, like `PD=40` See examples.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateSizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or update $SIZES in a control stream — NMupdateSizes","text":"Character lines updated control stream","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMupdateSizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or update $SIZES in a control stream — NMupdateSizes","text":"","code":"## No existing SIZES in control stream if (FALSE) { # \\dontrun{ file.mod <- system.file(\"examples/nonmem/xgxr032.mod\",package=\"NMsim\") NMupdateSizes(file.mod,LTV=50,write=FALSE) } # } ## This controls stream has existing SIZES if (FALSE) { # \\dontrun{ file.mod <- system.file(\"examples/nonmem/xgxr134.mod\",package=\"NMsim\") NMupdateSizes(file.mod,LTV=50,write=FALSE) } # } ## provide control stream as text lines if (FALSE) { # \\dontrun{ file.mod <- system.file(\"examples/nonmem/xgxr032.mod\",package=\"NMsim\") lines <- readLines(file.mod) NMupdateSizes(lines=lines,LTV=50,write=FALSE) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMwriteInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a parameter values to a control stream — NMwriteInits","title":"Writes a parameter values to a control stream — NMwriteInits","text":"Edit parameter values, fix/unfix , edit lower/upper bounds.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMwriteInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a parameter values to a control stream — NMwriteInits","text":"","code":"NMwriteInits(   file.mod,   update = TRUE,   file.ext = NULL,   ext,   values,   newfile,   ... )"},{"path":"https://NMautoverse.github.io/NMsim/reference/NMwriteInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a parameter values to a control stream — NMwriteInits","text":"file.mod Path control stream. update `TRUE` (default), parameter values updated based `.ext` file. file.ext Optionally provide path `.ext` file. provided, default replace file name extention `file.mod` `.ext`. used `update=TRUE`. values list lists. list specifies parameter named elements. Must named parameter name. ll, ul fix can supplied modify parameter. See examples. Notice, can use `...` instead. `values` may easier programming , users find `...` intuitive. newfile provided, results written file new input control stream. ... Parameter specifications. See examples,","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMwriteInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a parameter values to a control stream — NMwriteInits","text":"control stream lines character vector.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NMwriteInits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes a parameter values to a control stream — NMwriteInits","text":"","code":"## Requires NMdata 0.1.9 if (FALSE) { # \\dontrun{ file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\")  NMwriteInits(file.mod, values=list( \"theta(2)\"=list(init=1.4),              \"THETA(3)\"=list(FIX=1),              \"omega(2,2)\"=list(init=0.1)) ) NMwriteInits(file.mod,   \"theta(2)\"=list(init=1.4),   \"THETA(3)\"=list(FIX=1),   \"omega(2,2)\"=list(init=0.1) ) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"Calculate add degrees freedom used simulation using inverse Wishart distribution.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"","code":"NWPRI_df(pars)"},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"pars Parameters long format, returned `NMreadExt()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"data.table DF2 added. See details.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"degrees freedom calculated DF =     2*((est**2)/(se**2)) + 1 -blocksize-1 DF2 adjusted     greater blocksize, minumum degrees     freedom observed block applied full     block. fixed parameters, DF2 equals blocksize.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/NWPRI_df.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add degrees of freedom by OMEGA/SIGMA block — NWPRI_df","text":"inverse-Wishart degrees freedom calculation OMEGA SIGMA: NONMEM tutorial part II, supplement 1, part C.","code":""},{"path":[]},{"path":"https://NMautoverse.github.io/NMsim/reference/add.html","id":null,"dir":"Reference","previous_headings":"","what":"Create function that adds text elements to vector — add","title":"Create function that adds text elements to vector — add","text":"Create function adds text elements vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create function that adds text elements to vector — add","text":"","code":"add(..., .pos = \"bottom\")"},{"path":"https://NMautoverse.github.io/NMsim/reference/add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create function that adds text elements to vector — add","text":"... Elements add. .pos Either \\\"top\\\" \\\"bottom\\\". Decides new text prepended appended existing text.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create function that adds text elements to vector — add","text":"function adds specified text character vectors","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create function that adds text elements to vector — add","text":"","code":"myfun <- add(\"b\",\"d\") myfun(\"a\") #> [1] \"a\" \"b\" \"d\" myfun2 <- add(\"b\",\"d\",.pos=\"top\") myfun2(\"a\") #> [1] \"b\" \"d\" \"a\""},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":null,"dir":"Reference","previous_headings":"","what":"Add simulation records to dosing records — addEVID2","title":"Add simulation records to dosing records — addEVID2","text":"Deprecated, use `NMaddSampples()`. Adds simulation events subjects data set. Copies columns varying subject level (.e. non-variying covariates). Can add simulation events relative previous dosing time.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add simulation records to dosing records — addEVID2","text":"","code":"addEVID2(   data,   TIME,   TAPD,   CMT,   EVID,   DV,   col.id = \"ID\",   args.NMexpandDoses,   unique = TRUE,   extras.are.covs = TRUE,   as.fun,   doses,   time.sim )"},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add simulation records to dosing records — addEVID2","text":"data Nonmem-style data set. using `TAPD` `EVID` column must contain 1 dosing records. TIME numerical vector simulation times. Can also data.frame case must contain `TIME` column merged `data`. TAPD numerical vector simulation times, relative previous dose. used, `data` must contain rows `EVID=1` events `TIME` column. `TAPD` can also data.frame case must contain `TAPD` column merged `data`. CMT compartment insert EVID=2 records. Required `CMT` column `data`. longer one, records repeated specified compartments. data.frame, covariates can specified. EVID value put `EVID` column created rows. Default 2 0 may prefered even simulation. DV Optionally provide single value assigned `DV` column. default assign nothing result `NA` samples stacked (`rbind`) `data`. assign different value `DV`, default value `EVID` changes `0`, `MDV` `0` instead `1`. example useful generating datasets `$DESIGN` `DV=0` often used. col.id name column `data` holds unique subject identifier. args.NMexpandDoses relevant - likely needed - data contains ADDL II columns. columns included, `addEVID2()` use `NMdata::NMexpanDoses()` evaluate time dose. `data` argument, `addEVID2()` relies default `NMexpanDoses()` argument values. insufficient, can specify argument values list, can call `NMdata::NMexpanDoses()` manually calling `addEVID2()`. unique `TRUE` (default), events reduced unique time points insertion. Sometimes, easier combine sequences time points overlap (maybe across `TIME` `TAPD`), let `addEVID2()` clean . want keep duplicated events, use `unique=FALSE`. extras..covs `TIME` /`TAPD` `data.frame`s contain columns `TIME` /`TAPD`, default assumed covariates merged data. specifically, merged sample times added. `extras..covs=FALSE`, merged . Instead, just kept additional columns specified values, aligned sample times. .fun default return data `data.frame`. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use `.fun=\"data.table\"`. default can configured using `NMdataConf()`. doses Deprecated. Use `data`. time.sim Deprecated. Use `TIME`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add simulation records to dosing records — addEVID2","text":"data.frame dosing records","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add simulation records to dosing records — addEVID2","text":"resulting data set ordered ID, TIME,     EVID. may reorder specific needs.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addEVID2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add simulation records to dosing records — addEVID2","text":"","code":"(doses1 <- NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1))) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 addEVID2(doses1,TIME=seq(0,28,by=4),CMT=2) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead. #>    ID TIME EVID CMT AMT MDV #> 1   1    0    1   1   2   1 #> 2   1    0    2   2  NA   1 #> 3   1    4    2   2  NA   1 #> 4   1    8    2   2  NA   1 #> 5   1   12    1   1   1   1 #> 6   1   12    2   2  NA   1 #> 7   1   16    2   2  NA   1 #> 8   1   20    2   2  NA   1 #> 9   1   24    1   1   1   1 #> 10  1   24    2   2  NA   1 #> 11  1   28    2   2  NA   1 #> 12  1   36    1   1   1   1  ## two named compartments dt.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) dt.cmt <- data.frame(CMT=c(2,3),analyte=c(\"parent\",\"metabolite\")) res <- addEVID2(dt.doses,TIME=seq.time,CMT=dt.cmt) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead.  ## Separate sampling schemes depending on covariate values dt.doses <- NMcreateDoses(TIME=data.frame(regimen=c(\"SD\",\"MD\",\"MD\"),TIME=c(0,0,12)),AMT=10,CMT=1)  seq.time.sd <- data.frame(regimen=\"SD\",TIME=seq(0,6)) seq.time.md <- data.frame(regimen=\"MD\",TIME=c(0,4,12,24)) seq.time <- rbind(seq.time.sd,seq.time.md) addEVID2(dt.doses,TIME=seq.time,CMT=2) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead. #>    ID TIME EVID CMT AMT MDV regimen #> 1   1    0    1   1  10   1      SD #> 2   1    0    2   2  NA   1      SD #> 3   1    1    2   2  NA   1      SD #> 4   1    2    2   2  NA   1      SD #> 5   1    3    2   2  NA   1      SD #> 6   1    4    2   2  NA   1      SD #> 7   1    5    2   2  NA   1      SD #> 8   1    6    2   2  NA   1      SD #> 9   2    0    1   1  10   1      MD #> 10  2    0    2   2  NA   1      MD #> 11  2    4    2   2  NA   1      MD #> 12  2   12    1   1  10   1      MD #> 13  2   12    2   2  NA   1      MD #> 14  2   24    2   2  NA   1      MD  ## an observed sample scheme and additional simulation times df.doses <- NMcreateDoses(TIME=0,AMT=50,addl=list(ADDL=2,II=24)) dense <- c(seq(1,3,by=.1),4:6,seq(8,12,by=4),18,24) trough <- seq(0,3*24,by=24) sim.extra <- seq(0,(24*3),by=2) time.all <- c(dense,dense+24*3,trough,sim.extra) time.all <- sort(unique(time.all)) dt.sample <- data.frame(TIME=time.all) dt.sample$isobs <- as.numeric(dt.sample$TIME%in%c(dense,trough)) dat.sim <- addEVID2(dt.doses,TIME=dt.sample,CMT=2) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead.  ## TAPD - time after previous dose df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) addEVID2(df.doses,TAPD=seq.time,CMT=2) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead. #>   ID TIME EVID CMT AMT MDV TAPD #> 1  1    0    1   1  10   1   NA #> 2  1    0    2   2  NA   1    0 #> 3  1    4    2   2  NA   1    4 #> 4  1   12    1   1  10   1   NA #> 5  1   12    2   2  NA   1    0 #> 6  1   16    2   2  NA   1    4 #> 7  1   24    2   2  NA   1   12 #> 8  1   36    2   2  NA   1   24  ## TIME and TAPD df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) addEVID2(df.doses,TIME=seq.time,TAPD=3,CMT=2) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead. #>   ID TIME EVID CMT AMT MDV TAPD #> 1  1    0    1   1  10   1   NA #> 2  1    0    2   2  NA   1   NA #> 3  1    3    2   2  NA   1    3 #> 4  1    4    2   2  NA   1   NA #> 5  1   12    1   1  10   1   NA #> 6  1   12    2   2  NA   1   NA #> 7  1   15    2   2  NA   1    3 #> 8  1   24    2   2  NA   1   NA  ## Using a custom DV value affects EVID and MDV  df.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(4) addEVID2(df.doses,TAPD=seq.time,CMT=2,DV=0) #> `addEVID2()` is deprecated and is no longer maintained. Use `NMaddSamples()` instead. #>   ID TIME EVID CMT AMT MDV TAPD DV #> 1  1    0    1   1  10   1   NA NA #> 2  1    4    0   2  NA   0    4  0 #> 3  1   12    1   1  10   1   NA NA #> 4  1   16    0   2  NA   0    4  0"},{"path":"https://NMautoverse.github.io/NMsim/reference/addResVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residual variability based on parameter estimates — addResVar","title":"Add residual variability based on parameter estimates — addResVar","text":"Add residual variability based parameter estimates","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addResVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residual variability based on parameter estimates — addResVar","text":"","code":"addResVar(   data,   path.ext,   prop = NULL,   add = NULL,   log = FALSE,   par.type = \"SIGMA\",   trunc0 = TRUE,   scale.par,   subset,   seed,   col.ipred = \"IPRED\",   col.ipredvar = \"IPREDVAR\",   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/addResVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residual variability based on parameter estimates — addResVar","text":"data data set containing indiviudual predictions. Often result NMsim. path.ext Path ext file take parameter estimates . prop Parameter number parameter holding variance proportional error component. ERR(1) used proportional error, use prop=1. Can also refer theta number. add Parameter number parameter holding variance additive error component. ERR(1) used additive error, use add=1. Can also refer theta number. log error added log scale? used obtain exponential error distribution. par.type Use \"sigma\" variances estimated SIGMA matrix. Use \"theta\" THETA parameters used. See `scale.par` . trunc0 log=FALSE, truncate simulated values 0? trunc0, returned predictions can negative. scale.par Denotes parmeter represents variance standard deviation. Allowed values default value depends `par.type`. par.type=\"sigma\" \"var\" allowed. par.type=\"theta\" allowed values \"sd\" \"var\". Default \"sd\". subset character string expression denoting subset add residual error. Example: subset=\"DVID==''\" seed number pass set.seed() simulating. Default generate seed report console. Use seed=FALSE avoid setting seed (prefer otherwise). col.ipred name column containing individual predictions. col.ipredvar name column created addResVar contain simulated observations (individual predictions plus residual error). .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addResVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add residual variability based on parameter estimates — addResVar","text":"updated data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/addResVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add residual variability based on parameter estimates — addResVar","text":"","code":"if (FALSE) { # \\dontrun{ ## based on SIGMA simres.var <- addResVar(data=simres,                         path.ext = \"path/to/model.ext\",                         prop = 1,                         add = 2,                         par.type = \"SIGMA\",                         log = FALSE)  ## If implemented using THETAs simres.var <- addResVar(data=simres,                         path.ext = \"path/to/model.ext\",                         prop = 8, ## point to elements in THETA                         add = 9,  ## point to elements in THETA                         par.type = \"THETA\",                         log = FALSE)  } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/callNonmemDirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate system command to call Nonmem directly — callNonmemDirect","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"Generate system command call Nonmem directly","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/callNonmemDirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"","code":"callNonmemDirect(file.mod, path.nonmem)"},{"path":"https://NMautoverse.github.io/NMsim/reference/checkTimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"Test file modification times indicate Nonmem models re-run","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/checkTimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"","code":"checkTimes(   file,   use.input = TRUE,   nminfo.input = NULL,   file.mod,   tz.lst = NULL,   use.tmp = TRUE )"},{"path":"https://NMautoverse.github.io/NMsim/reference/checkTimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"file Path Nonmem-created file. Typically output control stream. use.input Scan input data updates ? Default TRUE. nminfo.input want take account input data avoid re-reading information, can pass NMdata meta data object. file.mod input control stream tz.lst files moved around file systems, file modification time may reflective Nonmem runtime. case, can choose extract time stamp output control stream. issue Nonmem write time zone, pass checkTimes wanted.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/cleanStrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","title":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","text":"Drop spaces odd characters. Use ensure generated file names usable.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/cleanStrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","text":"","code":"cleanStrings(x)"},{"path":"https://NMautoverse.github.io/NMsim/reference/cleanStrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","text":"x string clean","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/cleanStrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","text":"character vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/cleanStrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop spaces and odd characters. Use to ensure generated file names are usable. — cleanStrings","text":"","code":"NMsim:::cleanStrings(\"e w% # ff!l3:t,3?.csv\") #> [1] \"ew%ffl3t3.csv\" NMsim:::cleanStrings(\"3!?:#;<>=, {}|=g+&- .csv\") #> [1] \"3g.csv\""},{"path":"https://NMautoverse.github.io/NMsim/reference/completeCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a set of covariate values into a data.set with reference value — completeCov","title":"Expand a set of covariate values into a data.set with reference value — completeCov","text":"Expand set covariate values data.set reference value","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/completeCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a set of covariate values into a data.set with reference value — completeCov","text":"","code":"completeCov(covlist, data, col.id = \"ID\", sigdigs = 2)"},{"path":"https://NMautoverse.github.io/NMsim/reference/completeCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a set of covariate values into a data.set with reference value — completeCov","text":"covlist covariate specififed list. See ?expandCovLists. data See ?expandCovLists. col.id subject ID column name. Necessary quantiles sould quantiles distribution covariate subjects, observations (subject contributes ). sigdigs Used rounding covariate values using quantiles using function find reference.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/completeCov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a set of covariate values into a data.set with reference value — completeCov","text":"","code":"NMsim:::completeCov(covlist=list(covvar=\"WEIGHTB\",values=c(30,60,90),ref=50),sigdigs=3) #>     covvar covval covvalc covlabel covref   type #>     <char>  <num>   <num>   <char>  <num> <char> #> 1: WEIGHTB     30      30  WEIGHTB     50  value #> 2: WEIGHTB     60      60  WEIGHTB     50  value #> 3: WEIGHTB     90      90  WEIGHTB     50  value #> 4: WEIGHTB     50      50  WEIGHTB     50    ref"},{"path":"https://NMautoverse.github.io/NMsim/reference/dtapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply function and return a data.table — dtapply","title":"Apply function and return a data.table — dtapply","text":"convenience function returns data.table column representing input values column results. still experimental work many input structures.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/dtapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply function and return a data.table — dtapply","text":"","code":"dtapply(X, FUN, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/dtapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply function and return a data.table — dtapply","text":"... arguments passed lapply","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/dtapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply function and return a data.table — dtapply","text":"data.table","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/dtapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply function and return a data.table — dtapply","text":"functions return vectors currently     supported. dtapply support functions return     data.frames.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/expandCovs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data set where each covariate is univariately varied (see `forestDefineCovs()`) — expandCovs","title":"Create data set where each covariate is univariately varied (see `forestDefineCovs()`) — expandCovs","text":"Create data set covariate univariately varied (see `forestDefineCovs()`)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/expandCovs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data set where each covariate is univariately varied (see `forestDefineCovs()`) — expandCovs","text":"","code":"expandCovs(...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/expandCovs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data set where each covariate is univariately varied (see `forestDefineCovs()`) — expandCovs","text":"... Passed `forestDefineCovs()`","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/expandCovs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data set where each covariate is univariately varied (see `forestDefineCovs()`) — expandCovs","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/findUpdated.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter control streams to only those updated since last run — findUpdated","title":"Filter control streams to only those updated since last run — findUpdated","text":"Filter control streams updated since last run","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/findUpdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter control streams to only those updated since last run — findUpdated","text":"","code":"findUpdated(mods)"},{"path":"https://NMautoverse.github.io/NMsim/reference/findUpdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter control streams to only those updated since last run — findUpdated","text":"mods list (input output) control streams consider","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/findUpdated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter control streams to only those updated since last run — findUpdated","text":"character vector paths found models","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestDefineCovs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data set where each covariate is univariately varied — forestDefineCovs","title":"Create data set where each covariate is univariately varied — forestDefineCovs","text":"covariate univariately varied covariates kept reference values. structure often used forest-plot type simulations.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestDefineCovs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data set where each covariate is univariately varied — forestDefineCovs","text":"","code":"forestDefineCovs(   ...,   data,   col.id = \"ID\",   sigdigs = 2,   reduce.ref = TRUE,   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/forestDefineCovs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data set where each covariate is univariately varied — forestDefineCovs","text":"... Covariates provided lists - see examples. name arguement must match columns data set. element called ref must contain either reference value function use derive reference value data (e.g. `median`). Provide either `values` `quantiles` define covariate values interest (typically, values later simulated maybe shown forest plot). `label` optional - missing, argument name used. quantiles requested, derived requiring unique values subject. data data set needed reference(s) value one covariates /provided functions (like median), covariate values provided quantiles. col.id subject ID column name. Necessary quantiles sould quantiles distribution covariate subjects, observations (subject contributes ). sigdigs Used rounding covariate values using quantiles using function find reference. reduce.ref `TRUE` (default), return one row reference values. `FALSE` one row covariate. reduced one line, columns related covariate-level information covariate name contain `NA` reference. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestDefineCovs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data set where each covariate is univariately varied — forestDefineCovs","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestDefineCovs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data set where each covariate is univariately varied — forestDefineCovs","text":"","code":"if (FALSE) { # \\dontrun{ file.mod <- system.file(\"examples/nonmem/xgxr134.mod\",package=\"NMdata\") res <- NMdata::NMscanData(file.mod) forestDefineCovs(     WEIGHTB=list(ref=70,values=c(40,60,80,100),label=\"Bodyweight (kg)\"), ## notice, values OR quantiles can be provided     AGE=list(ref=median, quantiles=c(10,25,75,90)/100, label=\"Age (years)\"              ),     data=res ) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/forestSummarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize simulated exposures relative to reference subject — forestSummarize","title":"Summarize simulated exposures relative to reference subject — forestSummarize","text":"Summarize simulated exposures relative reference subject","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestSummarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize simulated exposures relative to reference subject — forestSummarize","text":"","code":"forestSummarize(data, funs.exposure, cover.ci = 0.95, by, as.fun)"},{"path":"https://NMautoverse.github.io/NMsim/reference/forestSummarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize simulated exposures relative to reference subject — forestSummarize","text":"data Simulated data process. data.frame must contain must contain multiple columns, defined NMsim::expandCovs(). funs.exposure named list functions apply derivation exposure metrics. cover.ci coverage confidence intervals. Default 0.95. character vector column names perform calculations . sampling subsets analyte. .fun default return data `data.frame`. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use `.fun=\"data.table\"`. default can configured using `NMdataConf()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestSummarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize simulated exposures relative to reference subject — forestSummarize","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/forestSummarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize simulated exposures relative to reference subject — forestSummarize","text":"function part workflow provided NMsim     generate forest plots - graphical representation     estimated covariate effects uncertainty     effect estimates. `expandCovs()` helps construct set     simulations perform, simulation methods like `NMsim_VarCov`     `NMsim_NWPRI` can perform siulations parameter     uncertainty, `forestSummarize()` can summarize     simulation results numbers plot forest     plot. See NMsim vignette forest plot generation     available NMsim website step--step     demonstration. following columns     generated `expandCovs()` expected     present. Differences within lead separate     summarizing (say covariate value plotted): `model`: model identifier - generated `NMsim()`. `type`: simulation type. \"ref\" reference subject, \"value\" . generated `expandCovs()`. `covvar`: covariate (interest) different reference value specific simulation. Example: \"WT\" `covlabel`: Label covariate interest. Example: \"Bodyweight (kg)\" `covref`: Reference value covariate interest. Example: 80 `covval`: Value covariate interest (reference). Example 110.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/genPhiFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a .phi file for further simulation with Nonmem — genPhiFile","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"typically used couple different situations. One number new subjects simulated ETAs reused subsequent simulations. Another internally NMsim simulating new subjects models estimated SAEM.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/genPhiFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"","code":"genPhiFile(data, file, overwrite = FALSE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/genPhiFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"data dataset contains \"ID\" `ETA`s. can obtained `NMdata::NMscanData`. file Path .phi file written. overwrite `file` exists already, overwrite ? Default `FALSE`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/genPhiFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"Invisibly, character lines (strings) optionally written     file","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/inputArchiveDefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Default location of input archive file — inputArchiveDefault","title":"Default location of input archive file — inputArchiveDefault","text":"Default location input archive file","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/inputArchiveDefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default location of input archive file — inputArchiveDefault","text":"","code":"inputArchiveDefault(file)"},{"path":"https://NMautoverse.github.io/NMsim/reference/inputArchiveDefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default location of input archive file — inputArchiveDefault","text":"file Path input output control stream.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/inputArchiveDefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default location of input archive file — inputArchiveDefault","text":"file name (character)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/modifyModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal method for handling modify argument to NMsim — modifyModel","title":"Internal method for handling modify argument to NMsim — modifyModel","text":"Internal method handling modify argument NMsim","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/modifyModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal method for handling modify argument to NMsim — modifyModel","text":"","code":"modifyModel(modify, dt.models = NULL, list.ctl = NULL)"},{"path":"https://NMautoverse.github.io/NMsim/reference/modifyModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal method for handling modify argument to NMsim — modifyModel","text":"modify list dt.models data.table list.ctl List coontrol streams lines","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/modifyModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal method for handling modify argument to NMsim — modifyModel","text":"dt.models (data.table) result list.ctl (list)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/overwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Create function that modifies text elements in a vector — overwrite","title":"Create function that modifies text elements in a vector — overwrite","text":"Create function modifies text elements vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/overwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create function that modifies text elements in a vector — overwrite","text":"","code":"overwrite(..., fixed = TRUE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/overwrite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create function that modifies text elements in a vector — overwrite","text":"... Passed `gsub()` fixed passed gsub(), `overwrite()`'s default behavior opposite one `gsub()`. Default `FALSE` means strings exactly matched replaced. useful strings like `THETA(1)` contains special characters. Use `fixed=FALSE` use regular expressions. Also, see arguments accepted `gsub()` advanced features.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/overwrite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create function that modifies text elements in a vector — overwrite","text":"function runs `gsub` character vectors","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/overwrite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create function that modifies text elements in a vector — overwrite","text":"","code":"myfun <- overwrite(\"b\",\"d\") myfun(c(\"a\",\"b\",\"c\",\"abc\")) #> [1] \"a\"   \"d\"   \"c\"   \"adc\" ## regular expressions myfun2 <- overwrite(\"b.*\",\"d\",fixed=FALSE) myfun2(c(\"a\",\"b\",\"c\",\"abc\")) #> [1] \"a\"  \"d\"  \"c\"  \"ad\""},{"path":"https://NMautoverse.github.io/NMsim/reference/padZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"pad zeros on integers — padZeros","title":"pad zeros on integers — padZeros","text":"pad zeros integers","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/padZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pad zeros on integers — padZeros","text":"","code":"padZeros(x, nchars)"},{"path":"https://NMautoverse.github.io/NMsim/reference/padZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pad zeros on integers — padZeros","text":"x integers pad. can coded characters already. nchars Optional specification length character strings return. supplied, characters padded match length max value x.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/padZeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pad zeros on integers — padZeros","text":"character vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/pasteFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste string to start of vector only — pasteFuns","title":"Paste string to start of vector only — pasteFuns","text":"paste(str,x) prepend str values x. use pasteBegin paste first value x.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/pasteFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste string to start of vector only — pasteFuns","text":"","code":"pasteBegin(x, add, ...)  pasteEnd(x, add, ...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/pasteFuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste string to start of vector only — pasteFuns","text":"x vector strings add string add ... Aditional arguments `paste()`.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prettyMatLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","title":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","text":"Print OMEGA SIGMA matrices NONMEM sections block format. Note: function currently works fixed blocks       NMsim_NWPRI functionality printing $THETAPV.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prettyMatLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","text":"","code":"prettyMatLines(block_mat_string)"},{"path":"https://NMautoverse.github.io/NMsim/reference/prettyMatLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","text":"block_mat_string Output NMsim::NMcreateMatLines. string OMEGA/SIGMA estimates wrapped onto multiple lines ease reading NONMEM control streams.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prettyMatLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","text":"Character vector","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prettyMatLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print OMEGA and SIGMA matrices for NONMEM sections in block format. Note: This function currently only works with fixed blocks as in the NMsim_NWPRI functionality for printing $THETAPV. — prettyMatLines","text":"function currently used functions     NMsim now deprecated. NMcreateMatLines() handles     internally.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prioritizePaths.html","id":null,"dir":"Reference","previous_headings":"","what":"first path that works — prioritizePaths","title":"first path that works — prioritizePaths","text":"using scripts different systems, Nonmem path may change run run. function can specify paths, return one works system use.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/prioritizePaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"first path that works — prioritizePaths","text":"","code":"prioritizePaths(paths, must.work = FALSE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/prioritizePaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"first path that works — prioritizePaths","text":"paths vector file paths. Typically Nonmem executables. must.work TRUE, error thrown paths valid.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter data from csv — readParsWide","title":"Parameter data from csv — readParsWide","text":"Reads output table simpar returns long format data.table. format returned NMreadExt() can used NMsim.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter data from csv — readParsWide","text":"","code":"readParsWide(   data,   col.model,   col.model.sim,   strings.par.type = c(THETA = \"^T.*\", OMEGA = \"^O.*\", SIGMA = \"^S.\"),   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter data from csv — readParsWide","text":"data data.frame path delimited file read using `data.table::fread`. col.model Column containing name original model. default column called \"model\" contain \"Model1\". col.model.sim Name model counter, default \"model.sim\". provided name found data, created row counter. needed? row data represents set parameters, .e. model. long format result, model multiple rows. Hence, model identifier needed distinguish models results. strings.par.type Defines column names get associated THETA, OMEGA, SIGMA. Default look \"T\", \"O\", \"S\" starting letter. customizing, make sure column name matched one criterion. .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter data from csv — readParsWide","text":"long-format data.frame model parameters","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter data from csv — readParsWide","text":"wide data format read `readParsWide`     Nonmem format. used bridge output tools     simpar, potentially PSN. function reads data \"wide\" parameters -     column parameter, one row per parameter set     \"model\". returns data set \"long\" model     parameters. long format contains id.model.par unique model-parameter identifier. row-identifier. model Model identifier. par.type (\"THETA\", \"OMEGA\", \"SIGMA\") j indexes parameters (j NA par.type==\"THETA\"). value parameter value parameter Nonmem-style parameter names. THETA1, OMEGA(1,1) etc. Notice inconsistent naming THETA vs others. name.wide column name wide data value taken columns \"measure variables\" read values      specified three regular expressions, called THETA, OMEGA, SIGMA. default three regular expressions associate column name starting \"T\" THETAs, \"O\" \"S\" followed anything means \"OMEGA\" \"SIGMA\". readParsWide extracts j indexes sequences digits column names. TH.1 TETA1, SG1.1 SIGMA(1,1).","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/readParsWide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter data from csv — readParsWide","text":"","code":"if (FALSE) { # \\dontrun{ tab.ext <- readParsCsv(\"simpartab.csv\") ## or tab.simpar <- fread(\"simpartab.csv\") tab.ext <- readParsCsv(tab.simpar) NMsim(...,method.sim=NMsim_VarCov,tab.ext=tab.ext) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleCovs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample subject-level covariates from an existing data set — sampleCovs","title":"Sample subject-level covariates from an existing data set — sampleCovs","text":"Repeats data set just one subject sampling covariates subjects existing data set. can conveniently used generate new subjects covariate resampling studied population.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleCovs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample subject-level covariates from an existing data set — sampleCovs","text":"","code":"sampleCovs(   data,   Nsubjs,   col.id = \"ID\",   col.id.covs = \"ID\",   data.covs,   covs,   seed.R,   as.fun )"},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleCovs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample subject-level covariates from an existing data set — sampleCovs","text":"data simulation data set one subject Nsubjs number subjects sampled. can greater number subjects data.covs. col.id Name subject ID column `data` (default \"ID\"). col.id.covs Name subject ID column `data.covs` (default \"ID\"). data.covs data set containing subjects sample covariates . covs name covariates (columns) sample `data.covs`. seed.R provided, passed `set.seed()`. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleCovs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample subject-level covariates from an existing data set — sampleCovs","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleCovs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample subject-level covariates from an existing data set — sampleCovs","text":"","code":"library(NMdata) #> NMdata 0.2.0. Browse NMdata documentation at #> https://NMautoverse.github.io/NMdata/ data.covs <- NMscanData(system.file(\"examples/nonmem/xgxr134.mod\",package=\"NMsim\")) #> Model:  xgxr134  #>  #> Used tables, contents shown as used/total: #>                   file     rows columns   IDs #>        xgxr134_res.txt  731/731   12/12 90/90 #>       xgxr134_etas.txt  731/731     5/5 90/90 #>  xgxr2covs.rds (input) 731/1502   24/26 90/90 #>               (result)      731    41+2    90 #>  #> Input and output data merged by: ROW  #>  #> Distribution of rows on event types in returned data: #>  EVID CMT output result #>     0   2    641    641 #>     1   1     90     90 #>   All All    731    731 dos.1 <- NMcreateDoses(TIME=0,AMT=100)  data.sim.1 <- NMaddSamples(dos.1,TIME=c(1,4),CMT=2) sampleCovs(data=data.sim.1,Nsubjs=3,col.id.covs=\"ID\",data.covs=data.covs,covs=c(\"WEIGHTB\",\"eff0\")) #> Column(s) added: WEIGHTB, eff0 #>   ID IDCOVS WEIGHTB   eff0 TIME EVID CMT AMT MDV #> 1  1    135  117.55 55.676    0    1   1 100   1 #> 2  1    135  117.55 55.676    1    2   2  NA   1 #> 3  1    135  117.55 55.676    4    2   2  NA   1 #> 4  2    113  114.26 49.663    0    1   1 100   1 #> 5  2    113  114.26 49.663    1    2   2  NA   1 #> 6  2    113  114.26 49.663    4    2   2  NA   1 #> 7  3    166  101.18 59.792    0    1   1 100   1 #> 8  3    166  101.18 59.792    1    2   2  NA   1 #> 9  3    166  101.18 59.792    4    2   2  NA   1"},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"Sample model parameters using `mvrnorm` `simpar` package","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"","code":"samplePars(file.mod, nsims, method, seed.R, format = \"ext\", as.fun)"},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"file.mod Path model control stream. used `NMreadExt()` `NMreadCov()`, extension automatically replaced `.ext` `.cov`. nsims Number sets parameter values generate. Passed `simpar`. method sampling method. Options \"mvrnorm\" \"simpar\". pros cons. Notice methods fully automated long \".ext\" \".cov\" files available model estimation. seed.R seed value passed set.seed(). format returned data set format \"ext\" (default) \"wide\". \"ext\" long-format, similar `NMdata::NMreadExt()` returns. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"table sampled model parameters","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"samplePars() uses internal methods sample using     mvrnorm simpar. Also aware NMsim_NWPRI based     Nonmem-internal NWPRI subroutine. NMsim_NWPRI much     faster execute.  Simulation paramater uncertainty     variance components (`OMEGA` `SIGMA`) reliable     starting Nonmem 7.6.0. mvrorm: multivariate normal distribution ensure non-negative variances. Negative variances allowed can simulated. avoid , `method=mvrnorm` truncates negative variance diagonal elements zero. simpar: simpar must installed. Please refer publications vignettes information sampling methods.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/samplePars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample model parameters using `mvrnorm` or the `simpar` package — samplePars","text":"Sanaya Shroff, Philip Delff","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleParsSimpar.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample model parameters using the `simpar` package — sampleParsSimpar","title":"Sample model parameters using the `simpar` package — sampleParsSimpar","text":"Sample model parameters using `simpar` package","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleParsSimpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample model parameters using the `simpar` package — sampleParsSimpar","text":"","code":"sampleParsSimpar(file.mod, nsim, format = \"ext\", seed.R, as.fun)"},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleParsSimpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample model parameters using the `simpar` package — sampleParsSimpar","text":"file.mod Path model control stream. used `NMreadExt()` `NMreadCov()`, extension automatically replaced `.ext` `.cov`. nsim Number sets parameter values generate. Passed `simpar`. format \"ext\" (default) \"wide\". seed.R seed value passed set.seed(). .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleParsSimpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample model parameters using the `simpar` package — sampleParsSimpar","text":"table sampled model parameters","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/sampleParsSimpar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample model parameters using the `simpar` package — sampleParsSimpar","text":"Sanaya Shroff, Philip Delff","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simPopEtas.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a population based on a Nonmem model — simPopEtas","title":"Generate a population based on a Nonmem model — simPopEtas","text":"Generate population based Nonmem model","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simPopEtas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a population based on a Nonmem model — simPopEtas","text":"","code":"simPopEtas(   file,   N,   seed.R,   pars,   file.phi,   overwrite = FALSE,   as.fun,   file.mod,   seed,   ... )"},{"path":"https://NMautoverse.github.io/NMsim/reference/simPopEtas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a population based on a Nonmem model — simPopEtas","text":"file Passed `NMdata::NMreadExt()`. Path ext file. default, `NMreadExt()` uses `auto.ext=TRUE` means file name extension replaced `.ext`. ext file name extension `.ext`, add `auto.ext=FALSE` (see ...). N Number subjects generate seed.R Optional seed. passed `set.seed`. thing running `set.seed` just calling `simPopEtas()`. pars long-format parameter table containing par.type columns. supplied, parameter values read ext file, file effect. ext file available, likely better use file argument. file.phi optional phi file write generated subjects . overwrite `file.phi` exists already, overwrite ? Default `FALSE`. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf. file.mod Deprecated. Use file instead. seed Deprecated. Use seed.R instead. ... Additional arguments passed NMdata::NMreadExt().","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simPopEtas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a population based on a Nonmem model — simPopEtas","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simpleCharArg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"Check variable single character string meeting specified requirements","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simpleCharArg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"","code":"simpleCharArg(name.arg, val.arg, default, accepted, lower = TRUE, clean = TRUE)"},{"path":"https://NMautoverse.github.io/NMsim/reference/simpleCharArg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"name.arg Name argument val.arg argument value default val.arg NULL, returned? accepted values allowed lower run tolower? clean clean white spaces?","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simpleCharArg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"resulting parameter value","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simpleCharArg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"Better options may available packages like     checkmate. function check parameter     value, also sets default value missing.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simplePath.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify file paths by dropping .. and // — simplePath","title":"Simplify file paths by dropping .. and // — simplePath","text":"Simplify file paths dropping .. //","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simplePath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify file paths by dropping .. and // — simplePath","text":"","code":"simplePath(path)"},{"path":"https://NMautoverse.github.io/NMsim/reference/simplePath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify file paths by dropping .. and // — simplePath","text":"path single multiple file dir paths strings.","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simplePath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify file paths by dropping .. and // — simplePath","text":"Simplified paths strings","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/simplePath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify file paths by dropping .. and // — simplePath","text":"","code":"if (FALSE) { # \\dontrun{ path <- c(\"ds/asf.t\",\"gege/../jjj.r\") NMsim:::simplePath(path) } # }"},{"path":"https://NMautoverse.github.io/NMsim/reference/summarizeCovs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize simulated exposures relative to reference subject (see `forestSummarize()`) — summarizeCovs","title":"Summarize simulated exposures relative to reference subject (see `forestSummarize()`) — summarizeCovs","text":"Summarize simulated exposures relative reference subject (see `forestSummarize()`)","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/summarizeCovs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize simulated exposures relative to reference subject (see `forestSummarize()`) — summarizeCovs","text":"","code":"summarizeCovs(...)"},{"path":"https://NMautoverse.github.io/NMsim/reference/summarizeCovs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize simulated exposures relative to reference subject (see `forestSummarize()`) — summarizeCovs","text":"... Passed `forestSummarize()`","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/summarizeCovs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize simulated exposures relative to reference subject (see `forestSummarize()`) — summarizeCovs","text":"data.frame","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/writeTextFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Conveniently writeLines to file — writeTextFile","title":"Conveniently writeLines to file — writeTextFile","text":"Conveniently writeLines file","code":""},{"path":"https://NMautoverse.github.io/NMsim/reference/writeTextFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conveniently writeLines to file — writeTextFile","text":"","code":"writeTextFile(lines, file)"},{"path":"https://NMautoverse.github.io/NMsim/reference/writeTextFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conveniently writeLines to file — writeTextFile","text":"lines character lines write file file name path write ","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-023","dir":"Changelog","previous_headings":"","what":"NMsim 0.2.3","title":"NMsim 0.2.3","text":"CRAN release: 2025-05-20","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.2.3","text":"NMaddSamples() gains argument. makes NMaddSamples() easy use generation nominal sampling schemes recreation observed sampling schemes. Streamlining NMsim_VarCov() samplePars(). NMsim_VarCov() now always calls samplePars() internally. samplePars() uses method argument switch mvrnorm(multivariate normal distribution) simpar (inverse Wishart distribution. NMsim_VarCov() gains method.sample argument passed method samplePars(). means NMsim_VarCov() can used simulated parameter uncertainty using either mvrnorm simpar. Messages implemented samplePars() summarize number truncations case mvrnorm results negative variance parameters.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.2.3","text":"NMsim_VarCov() sampling OMEGA/SIGMA. Affects simulation -subject variability. Big thanks Sanaya Shroff reporting fixing.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-improvements-0-2-3","dir":"Changelog","previous_headings":"","what":"Other Improvements","title":"NMsim 0.2.3","text":"Improved defaults whether suppress Nonmem messages (nmquiet argument). Particularly, NMsim waiting Nonmem runs, default suppress messages. Basically, NMsim now default show Nonmem terminal messages waiting, one Nonmem model executed. Notice, quiet=TRUE implies suppressing NMsim Nonmem messages nmquiet=TRUE.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-changes-0-2-3","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"NMsim 0.2.3","text":"deprecated addEVID2() kept snapshot NMsamples() introduced. new argument compatible default behavior deprecated addEVID2(). ensure reproducibility existing code user side.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-022","dir":"Changelog","previous_headings":"","what":"NMsim 0.2.2","title":"NMsim 0.2.2","text":"CRAN release: 2025-05-06","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.2.2","text":"sampleCovs() new function conveniently sample subject-level covariates existing data set.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.2.2","text":"bug introduced version 0.2.1 leading NMsim() throw error saving data sets. issue fixed. default Nonmem $TABLE format insufficient NMsim’s way create row counters simulating 1e5 rows . NMsim now default using format much higher resolution. Thanks Sanaya Shroff helping debugging .","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-021","dir":"Changelog","previous_headings":"","what":"NMsim 0.2.1","title":"NMsim 0.2.1","text":"CRAN release: 2025-04-24","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"NMsim 0.2.1","text":"NMaddSamples() replaces addEVID2() function. addEVID2() still work redirects NMaddSamples() backward compatibility. existing work still work get (suppressable) message name change. Especially due work optimal sampling NMsim Ahmed Abulfathi , need flexible interface adding samples. NMaddSamples() comes new argument DV. default NMaddSamples() (used , addEVID2()) adds rows without DV values EVID=2 MDV=1. DV supplied, NMaddSamples() include value DV column default use EVID=0 MDV=0. example useful generating datasets $DESIGN DV=0 often used. samplePars() new function replaces sampleParsSimpar(). samplePars() takes method argument can used switch multivariate normal distribution method=\"mvrnorm\" using simpar package get use Inverse-Wishart distribution $OMEGA $SIGMA parameters. Notice, methods fully automated NMsim - need write path control stream number (nsims) parameter sets wanted. simPopEtas() default overwrite existing .phi file. simPopEtas() used generate sampled ETAs use future model simulations synthetic population (ETAs). .phi file stores ETAs gets overwritten using new seed, affect simulations using .phi file. Overwriting .phi file different seeds therefore avoided, new behavior protecting generated .phi files reduces risk.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.2.1","text":"NMsim_VarCov() include $OMEGA $SIGMA blocks lead errors Nonmem. bug likely introduced NMsim 0.1.6 now fixed. Version 0.2.0 gave warnings non-existing columns. warnings benign can safely ignored. avoided Version 0.2.1. Updating initial values models using argument random effects (e.g. -occasion variability) fail effects fixed. Resolved. Thanks Sergio Iadevaia reporting . Data sets commas character columns make NMsim fail. Support data sets carried new data handling approach implemented version 0.2.0. now resolved. NMcreateDoses() bug addl.lastonly feature throw errors TIME longer two. addl.lastonly=TRUE default means length ADDL argument one, applied last dose . common case initial doses (say load initial escalation phase) followed maintenance regimen. bug resolved. NMaddSamples() fail using TAPD argument TAPD already available column data. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-improvements-0-2-1","dir":"Changelog","previous_headings":"","what":"Other Improvements","title":"NMsim 0.2.1","text":"configuration job submission simplified jobs run parallel single-core processing. Checks included summarizeCovs() whether NA’s produced. summarizeCovs() used summarize simulated covariate effects (typically forest plots). Especially, reason reference exposure zero (likely error modeler), summarizeCovs() throw error. Now summarizeCovs() try identify , give useful messages back, report estimates. Consistent ordering columns simulation results independently col.id col.time.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-020","dir":"Changelog","previous_headings":"","what":"NMsim 0.2.0","title":"NMsim 0.2.0","text":"CRAN release: 2025-03-13","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"NMsim 0.2.0","text":"Data sets saved model. Output tables written read efficently. obtained combination default TABLE options efficient method read tables options changed user. user change , robust slower memory intensive method used. Input output data now default merged using row identifier inserted NMsim. makes NMsim robust Nonmem code simulate rows input data. Subproblems automatically counted NMREP column output. Force inclusion column using nmrep argument needed even using subproblems. Variables input data included results can specified using new carry.argument. default behavior NMsim() include variables input data result. However, data set contains many rows columns, can memory demanding. Now can minimize memory use maximize speed limiting variables input output. example simres case contain PRED, IPRED, Y output table, ID, TIME, EVID input data.frame (data). NMsim() also takes new argument table.format can used adjust table format. normally, necessary. reason list ID column input data table.vars since can carried directly fro input data, avoiding potential loss accuracy writing reading text files. need worry merging input output data correctly - NMsim() handles internally using row identifier. Handling Nonmem data filters. case sim run without simulation input data set, NMsim() default reuses estimation data set IGNORE ACCEPT statements estimation control stream. useful visual predictive check (VPC) simulations. However, aim may run simulation data set differnt inclusions. common example estimation run without samples quantification limit (M1), simulation also performed samples. can now done passing new filters NMsim(). fact, can even done first reading filters control stream, easily editing , passing NMsim().","code":"simres <- NMsim(file.mod,data,                 table.vars=c(\"PRED\",\"IPRED\",\"Y\"),                 carry.out=c(\"ID\",\"TIME\",`EVID`)                 )"},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.2.0","text":"NMsim()’s argument modify.model renamed modify. align argument names arguments available model modification, namely inits, sizes, filters. NMcreateDoses() requires AMT provided. addEVID2() requires CMT argument column name present data. models require CMT change allows building data sets NMcreateDoses() addEVID2().","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-016","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.6","title":"NMsim 0.1.6","text":"CRAN release: 2025-02-05 major improvement implemented NMSim_NWPRI(), simulation method leverages Nonmem NWPRI subroutine simulate models parameter uncertainty. method first included NMsim 0.1.3 - clearly declared version - trusted simulation THETAs. development NMsim NMdata support well bugfixes new Nonmem 7.6.0, NMsim provides full support simulation parameter uncertainty using inverse Wishart distribution simple interface. new arguments inits introduced manually specify parameter (initial) values. values go $THETA, $OMEGA SIGMA sections control stream. simulate final estimated values (stored .ext file), simply add inits=list(\"theta(1)\"=list(init=1.2)). simulation, parameter values (init) may interest, using NMsim estimation , bounds whether parameters fixed can now also controlled. BLOCK structures $OMEGA SIGMA can currently changed (say, correlation two random effects introduced removed). $SIZES can now easily controlled using simple sizes argument NMsim(). leverages new function NMupdateSizes() can used edit $SIZES independently NMsim() function. NMsim() just add argument like sizes=list(PD=100) update add $SIZES PD=100 needed. See documentation details. Nonmem execution Improved monitoring Nonmem jobs. NMsim 0.1.5, NMsim() always catch properly handled failed runs. Linux, much better handled now. Windows, failures still may caught properly - work don Windows align approach Linux. new post.fun argument introduced NMexec() run additional code Nonmem finished. can used automatically initiate creation goodness fit plots, simulations full workflows run using Rscript estimation models.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-6","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.6","text":"overwrite() helper function intended use NMsim()’s modify.model argument. work correctly strings containing special, least. Fixed. NMsim_NWPRI always paste full variance-covariance matrix theta estimates $THETAPV make NONMEM fail. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-015","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.5","title":"NMsim 0.1.5","text":"CRAN release: 2024-11-14","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.5","text":"NMreadSim() new argument called rm.tmp used remove intermediate NONMEM files successfully read. Remember, NMreadSim() creates compressed results data set read NMreadSim() future function calls, unless debugging needed simulation control streams files returned NONMEM running simulations, may better delete intermediate files altogether save disk space. expandCovs() new argument reduce.ref defaults TRUE meaning default one reference combination. FALSE expandCovs() return one reference covariate. forest plot can evaluated just one reference simulation. New function summarizeCovs() introduced summarize simulation results forest plots. function closely related expandCovs() NMsim() longer requires NONMEM available reuse.results=TRUE NONMEM need run.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.5","text":"NMsim 0.1.4 submit jobs cluster number cores nc=1. Fixed. Workaround 0.1.4, use nc=2. NMsim 0.1.4 erroneously concluded jobs failed sent cluster existing queue. due exit status qsub cases. fixed. workaround 0.1.4, just run sim queue initiated first NMsim called. NONMEM failed 0.1.4, NMsim might return debugging info. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-014","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.4","title":"NMsim 0.1.4","text":"CRAN release: 2024-11-02","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.4","text":"sampleParsSimpar() new function automates sampling parameter values estimated variance-variance matrix successful $COVARIANCE step using simpar R package Metrum Research Group. simpar currently CRAN, user must install MPN github make use sampleParsSimpar(). sampled parameter values can fed directly NMsim using NMsim_VarCov method making easy simulate parameter uncertainty based simpar. want thank Sanaya Shroff outstanding work functionality exciting work summarizing available methods simulation parameter uncertainty sharing ACoP 2024. Also big thanks Eric Anderson helping adjusting github workflows pull simpar MPN. expandCovs() new function puts together data sets univariately varying covariates keeping reference values. function can derive reference values covariate values simulate using .e. median() quantile(). NMsim() model: run name derived file.mod. name.sim: provided name.sim argument. model.sim name generated model. simple case, model name.sim combined. many cases, multiple models generated simulated control stream. longer requires .ext file updating parameter values using PSN’s update_inits. still recommended keep .ext file since provides higher accuracy .lst file. NMexec() submitting updated models, NMexec() now default try detect model already running submitting . Provides summary models submitted starting . NMcreateDoses() ADDL II now also separate arguments providing simpler interface addl argument. addl argument provides advantage able specify two columns together one data.frame, possibly including covariates. add.lastonly new argument. TRUE (default) ADDL II length 1, applied last event dosing regimen. col.id argument specify name subject id column omit altogether using col.id=NA. Now checking TIME covering length arguments. contrast arguments, make much sense try extrapolate TIME argument. addEVID2() now two arguments, TIME TAPD allow specification time since first dose time dose insert simulation records. two can even combined. TIME replaces now deprecated time.sim argument, TAPD new.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-4","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.4","text":"bug likely affecting Windows users execution Nonmem fixed. Windows, upgrade NMsim 0.1.4. Thank Boris Grinshpun reporting ! using method.execute=\"nmsim\" issue parallellization. major problem simulation applications, now fixed. NMsim() providing simulation data set - typically simulation VPC - NMsim() fail messages like issue fixed. using NMsim 0.1.3 earlier, workaround NMdataConf(.fun=\"data.table\"). simulation results data.table, convert .data.frame() preferred. Notice, NMdataConf() affects succeeding NMsim() calls also NMdata NMsim function calls. VPC simulation run, may want continue recieving data.tables, reset default value .fun: NMdataConf(.fun=NULL) turn back returning data.frames default. prefer tibbles, can NMdataConf(.fun=tibble::as_tibble). Generally, prefer work something data.frames (data.table tibble common alternatives), recommended use NMdataConf() customize default. NMexec fail running control streams named starting numerals (like 1.mod) sge=TRUE. due way sge job names generated NMexec(). Fixed prepending “NMsim_” cases. cases create many replicates covariates multiple arguments. Fixed.","code":"Error in `:=`((col.sim), ..name.sim) :   Check that is.data.table(DT) == TRUE. Otherwise, := and `:=`(...) are defined for use in j, once only and in particular ways. See help(\":=\")."},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-013","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.3","title":"NMsim 0.1.3","text":"CRAN release: 2024-08-26","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.3","text":"NMsim() New simulation method NMsim_NWPRI() simulate parameter uncertainty. automates simulation parameter uncertainty using Nonmem’s NWPRI subroutine models successful covariance step. now method works THETA since found parameter distributions sampled OMEGA SIGMA always match model estimates therefore trusted. ensure THETA sampled simulated, method run using typical=TRUE argument. method much faster existing methods NMsim simulation parameter uncertainty (NMsim_VarCov()). method depends NMdata version 0.1.7 greater. Big thanks Brian Reilly excellent work important contribution. add() function used NMsim()’s modify.model argument now supports prepending appending text lines control stream sections. default still append add(\"text\",.pos=\"top\") now prepend “text”. NMexec() “cleaning” feature added NMexec(), removing temporary files generated Nonmem ended execution. interface inspired PSN’s clean argument supporting values 0 (cleaning), 1-4 (quite cleaning - far difference betwen values), 5 complete deletion temporary directory. using method.execute=\"PSN\" NMsim calls PSN’s execute passing clean value. Default number cores used NMexec() can controlled using NMdataConf(nc=N) N desired default. Notice, NMsim() use default. parallellization commonly used simulation estimation. useful backup feature added. execution, existing results files related model default moved backup folder. backup files NMsimTestConf() - Function summarize test configuration. used internally provides important debugging information. readParsWide() - function read wide-format parameter tables - now exported. useful simulating parameter values sampled outside Nonmem, e.g. using simpar package.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.3","text":"NMexec() fail linux run models multiple $TABLE statements. Fixed. NMsim’s internal method update parameter initial values issue running models $OMEGA block structures. Fixed. NMreadSim() fail working directory changed. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.1.3","text":"addEVID2 longer add DV=NA column DV input data set.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-012","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.2","title":"NMsim 0.1.2","text":"CRAN release: 2024-07-15 changes since 0.1.1 except disabling test failing systems due technical reasons.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-011","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.1","title":"NMsim 0.1.1","text":"CRAN release: 2024-07-03 critical generally bugs found NMsim 0.1.0, NMsim 0.2.0 includes several improvements upgrades. interface feels smoother . want thank Ron Keizer feedback advice.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.1","text":"NMsim() much reduced improved messaging user. one model data set supplied generated, progress trackers shown starting Nonmem, waiting Nonmem finish, collecting simulation results. messages include information intermediate files final results files stored. NMexec() improved support estimation. method.execute=\"nmsim\" method.execute=\"psn\" work linux windows, even though less thoroughly tested windows. Thank Boris Grinshpun testing. Names files containing final results NMsim() renamed intuitive. previous _paths.rds now called _MetaData.rds. results, read compressed, file called _ResultsData.fst. Notice, files required fully recover simulation results. Thanks Brian Reilly discussions many design aspects. now possible provide specific parameters (THETA, OMEGA SIGMA) Nonmem simulation. NMsim() table simulations. See argument file.ext NMsim_VarCov’s argument ext. New arguments control seeds. NMsim can either use R’s set.seed generating seeds Nonmem. Detailed control seeds, including many include distribution random sources Nonmem, can controlled using seed.nm argument. way, user can add random processes estimated control stream. actual Nonmem seed values can also provided. method.sim=NMsim_typical() replaced argument typical=TRUE. means typical subject simulations can now combined simulations methods like NMsim_VarCov. NMsim() now adds column called sim carries name simulation defined name.sim argument. Several checks existence consistency files implemented. native Nonmem execution method now also works estimation. pnm files now saved model transparency.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.1","text":"Running rbind results NMsim throw errors. Thanks Simone Cassani reporting . Fixed. Using file name extensions .mod input control streams combination NMdataConf(file.mod) make NMsim fail. Thanks Brian Reilly reporting. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.1.1","text":"NMsim_known() renamed NMsim_EBE(). Generated control streams stripped “NMsim_” prefix. files located NMsim generated folders prefix uninformative. case multi-threaded (cluster) execution something went wrong NMexec() used write output files Nonmem current working directory. now written model execution directory clarity tidyness.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-010","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.0","title":"NMsim 0.1.0","text":"CRAN release: 2024-02-22 first time NMsim works Windows. may still limitations initial testing looks promising. Make sure set path.nonmem. See configuration vignette website: NMsim-config.html 0.1.0 also important upgrade solidifies way NMsim reads results simulations. addition important bug fixes, allows NMsim wait Nonmem complete simulations - even run cluster. means even large simulations NMsim can integrated scripts.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.0","text":"Works Windows - least features . NMsim() NMreadSim() now wait arguments controls wait Nonmem finish simulating. also work jobs sent cluster. NMsim() respects reuse.results argument. TRUE use results file file system. can used stead putting NMsim() calls inside -statement disable simulation read results file. NMsim() looks couple features provided control streams known able cause issues. Warnings issued found. addEVID2 new argument, EVID specify value EVID column . can useful sometimes use EVID=0 simulation records.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.0","text":"cases NMreadSim() get path right simulation results leading failures reading simulation results. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"other-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.1.0","text":"Functions NMreadExt NMreadPhi removed NMsim. live maintained NMdata package. NMsim, deprecated unmaintained functions.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-0010","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.10","title":"NMsim 0.0.10","text":"CRAN release: 2024-02-08 NMsim 0.0.9 unfortunate bug NMreadSim() fixed. bugfix difference 0.0.9 0.0.10.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-009","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.9","title":"NMsim 0.0.9","text":"CRAN release: 2024-02-07 NMsim 0.0.9 almost identical 0.0.8 ensures compatibility older R versions.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-0-9","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.9","text":"cases NMreadSim able read combine results models returned different data variables. Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-008","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.8","title":"NMsim 0.0.8","text":"CRAN release: 2024-02-07","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-0-8","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.8","text":"NMsim 0.0.1 generate rds file paths simulation files results model+data set simulated. changed now generate one table per model. makes simpler read simulation results cases. NMreadSim now best way user read NMsim simulation results. interprets rds files (ones intended reading), fst files, tables NMsim runs, NMsim results. makes less confusing can processed NMreadSim also sometimes easier generalize code reading simulation results. Also, NMsim now always reads results using NMreadSim. advantage fst file always produced NMsim waits read results. NMreadSim new argument, check.time default disabling checking whether collected fst file newer results files generated NMsim. Normally, ’s good thing check ways sharing file files may retain file modification times needed check . NMsim delete fst files finds normally problem skip check. modify.model argument use modify control stream NMsim done preparing simulation. couple helper functions available making really easy add contents (commonly used) modify contents. NMsim now tries reuse stored results reuse.results=TRUE. simple way - exist, attempted read - careful rerun simulations without option change arguments. NMsim default add DV column NA values DV input data. Nonmem often needs column, uninformative simulations. Disable feature using auto.dv=FALSE. transform option integrated table simulations created NMsim(). means even results read NMsim (simulation executed submitted cluster), transformation still applied NMreadSim() later. NMsim()'s dir.sims dir.res arguments can controlled using NMdata::NMdataConf(). Often two arguments used time, ’s convenient able configure script.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-0-8","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.8","text":"NMreadSim able read results current working directory NMsim executed. Now fixed. cases NMsim fail models multiple output tables table.vars argument used. Fixed. NMsim’s sim.dir..scratch argument respected due simple bug, leading dir.sims growing time simulation rerun. case simulation data list data sets NMsim order columns order.columns TRUE. Now fixed. case lists data sets, list element (data set) names included spaces, NMsim() throw error. Spaces data set names now replaced scores (“_“) avoid . often happen data sets split lists using data.table::split.data.table() - excellent way , way. Function simPopEtas() exported, available NMsim:::simPopEtas(). Fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-007","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.7","title":"NMsim 0.0.7","text":"CRAN release: 2024-01-08","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-0-7","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.7","text":"Function simPopEtas() generate population model. population can saved phi file reused subsequent simulations. function mistake exported 0.0.7 now must use NMsim:::simPopEtas() use . Function NMreadSim() provides simple interface reading simulation results. Especailly cases simulation parallelized otherwise spawns multiple Nonmem jobs, useful feature. list simulation data sets now simulated separate Nonmem runs. efficient way parellelize large simulation runs.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-006","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.6","title":"NMsim 0.0.6","text":"CRAN release: 2023-11-28","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-0-6","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.6","text":"Support parallelization simulations added using PSN. used possible run multiple simulations simultaneously separate threads. Now single simulation runs can parallelized sge type clusters (using qsub). See arguments sge nc.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"bugfixes-0-0-6","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.6","text":"simple mistake create problems genPhiFile() 10 ETAs model. Now fixed.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-005","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.5","title":"NMsim 0.0.5","text":"CRAN release: 2023-11-11","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-0-5","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.5","text":"Full support models estimated SAEM. Especially, simulation “known” subjects, .e. re-using emperical Bayes estimates, slightly different models. Experimental support windows PsN. dir.psn argument point directory executables execute update_inits found. Thanks Sjoerd Koopman debugging testing . Hopefully future versions, PsN needed Windows (like needed Linux). simulation method called NMsim_known now accepts .phi files use .phi file generated estimation run. useful one wants reuse subjects generated previous simulation.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"otherminor-improvements-0-0-5","dir":"Changelog","previous_headings":"","what":"Other/minor improvements","title":"NMsim 0.0.5","text":"NMexec now also copies shk (shrinkage estimates) file run. files default copied reported next control streams now xml, ext, cov, cor, coi, phi, shk - addition output table files archived input data course.","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"nmsim-002","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.2","title":"NMsim 0.0.2","text":"CRAN release: 2023-09-14","code":""},{"path":"https://NMautoverse.github.io/NMsim/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.2","text":"NMsim supports type.sim=\"typical\" means OMEGAS fixed zero. requires ext file present. Experimental support simulation estimated subjects using type.sim=\"known\".","code":""}]
